# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gle', [dirname(__file__)])
        except ImportError:
            import _gle
            return _gle
        if fp is not None:
            try:
                _mod = imp.load_module('_gle', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gle = swig_import_helper()
    del swig_import_helper
else:
    import _gle
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_gle.TUBE_JN_RAW_swigconstant(_gle)
TUBE_JN_RAW = _gle.TUBE_JN_RAW

_gle.TUBE_JN_ANGLE_swigconstant(_gle)
TUBE_JN_ANGLE = _gle.TUBE_JN_ANGLE

_gle.TUBE_JN_CUT_swigconstant(_gle)
TUBE_JN_CUT = _gle.TUBE_JN_CUT

_gle.TUBE_JN_ROUND_swigconstant(_gle)
TUBE_JN_ROUND = _gle.TUBE_JN_ROUND

_gle.TUBE_JN_MASK_swigconstant(_gle)
TUBE_JN_MASK = _gle.TUBE_JN_MASK

_gle.TUBE_JN_CAP_swigconstant(_gle)
TUBE_JN_CAP = _gle.TUBE_JN_CAP

_gle.TUBE_NORM_FACET_swigconstant(_gle)
TUBE_NORM_FACET = _gle.TUBE_NORM_FACET

_gle.TUBE_NORM_EDGE_swigconstant(_gle)
TUBE_NORM_EDGE = _gle.TUBE_NORM_EDGE

_gle.TUBE_NORM_PATH_EDGE_swigconstant(_gle)
TUBE_NORM_PATH_EDGE = _gle.TUBE_NORM_PATH_EDGE

_gle.TUBE_NORM_MASK_swigconstant(_gle)
TUBE_NORM_MASK = _gle.TUBE_NORM_MASK

_gle.TUBE_CONTOUR_CLOSED_swigconstant(_gle)
TUBE_CONTOUR_CLOSED = _gle.TUBE_CONTOUR_CLOSED

_gle.GLE_TEXTURE_ENABLE_swigconstant(_gle)
GLE_TEXTURE_ENABLE = _gle.GLE_TEXTURE_ENABLE

_gle.GLE_TEXTURE_STYLE_MASK_swigconstant(_gle)
GLE_TEXTURE_STYLE_MASK = _gle.GLE_TEXTURE_STYLE_MASK

_gle.GLE_TEXTURE_VERTEX_FLAT_swigconstant(_gle)
GLE_TEXTURE_VERTEX_FLAT = _gle.GLE_TEXTURE_VERTEX_FLAT

_gle.GLE_TEXTURE_NORMAL_FLAT_swigconstant(_gle)
GLE_TEXTURE_NORMAL_FLAT = _gle.GLE_TEXTURE_NORMAL_FLAT

_gle.GLE_TEXTURE_VERTEX_CYL_swigconstant(_gle)
GLE_TEXTURE_VERTEX_CYL = _gle.GLE_TEXTURE_VERTEX_CYL

_gle.GLE_TEXTURE_NORMAL_CYL_swigconstant(_gle)
GLE_TEXTURE_NORMAL_CYL = _gle.GLE_TEXTURE_NORMAL_CYL

_gle.GLE_TEXTURE_VERTEX_SPH_swigconstant(_gle)
GLE_TEXTURE_VERTEX_SPH = _gle.GLE_TEXTURE_VERTEX_SPH

_gle.GLE_TEXTURE_NORMAL_SPH_swigconstant(_gle)
GLE_TEXTURE_NORMAL_SPH = _gle.GLE_TEXTURE_NORMAL_SPH

_gle.GLE_TEXTURE_VERTEX_MODEL_FLAT_swigconstant(_gle)
GLE_TEXTURE_VERTEX_MODEL_FLAT = _gle.GLE_TEXTURE_VERTEX_MODEL_FLAT

_gle.GLE_TEXTURE_NORMAL_MODEL_FLAT_swigconstant(_gle)
GLE_TEXTURE_NORMAL_MODEL_FLAT = _gle.GLE_TEXTURE_NORMAL_MODEL_FLAT

_gle.GLE_TEXTURE_VERTEX_MODEL_CYL_swigconstant(_gle)
GLE_TEXTURE_VERTEX_MODEL_CYL = _gle.GLE_TEXTURE_VERTEX_MODEL_CYL

_gle.GLE_TEXTURE_NORMAL_MODEL_CYL_swigconstant(_gle)
GLE_TEXTURE_NORMAL_MODEL_CYL = _gle.GLE_TEXTURE_NORMAL_MODEL_CYL

_gle.GLE_TEXTURE_VERTEX_MODEL_SPH_swigconstant(_gle)
GLE_TEXTURE_VERTEX_MODEL_SPH = _gle.GLE_TEXTURE_VERTEX_MODEL_SPH

_gle.GLE_TEXTURE_NORMAL_MODEL_SPH_swigconstant(_gle)
GLE_TEXTURE_NORMAL_MODEL_SPH = _gle.GLE_TEXTURE_NORMAL_MODEL_SPH

def gleDestroyGC():
    return _gle.gleDestroyGC()
gleDestroyGC = _gle.gleDestroyGC

def gleGetJoinStyle():
    return _gle.gleGetJoinStyle()
gleGetJoinStyle = _gle.gleGetJoinStyle

def gleSetJoinStyle(style):
    return _gle.gleSetJoinStyle(style)
gleSetJoinStyle = _gle.gleSetJoinStyle

def gleGetNumSides():
    return _gle.gleGetNumSides()
gleGetNumSides = _gle.gleGetNumSides

def gleSetNumSides(slices):
    return _gle.gleSetNumSides(slices)
gleSetNumSides = _gle.gleSetNumSides

def glePolyCylinder(npoints, color_array, radius):
    return _gle.glePolyCylinder(npoints, color_array, radius)
glePolyCylinder = _gle.glePolyCylinder

def glePolyCylinder_c4f(npoints, color_array, radius):
    return _gle.glePolyCylinder_c4f(npoints, color_array, radius)
glePolyCylinder_c4f = _gle.glePolyCylinder_c4f

def glePolyCone(npoints, color_array, radius_array):
    return _gle.glePolyCone(npoints, color_array, radius_array)
glePolyCone = _gle.glePolyCone

def glePolyCone_c4f(npoints, color_array, radius_array):
    return _gle.glePolyCone_c4f(npoints, color_array, radius_array)
glePolyCone_c4f = _gle.glePolyCone_c4f

def gleExtrusion(ncp, cont_normal, up, npoints, color_array):
    return _gle.gleExtrusion(ncp, cont_normal, up, npoints, color_array)
gleExtrusion = _gle.gleExtrusion

def gleExtrusion_c4f(ncp, cont_normal, up, npoints, color_array):
    return _gle.gleExtrusion_c4f(ncp, cont_normal, up, npoints, color_array)
gleExtrusion_c4f = _gle.gleExtrusion_c4f

def gleTwistExtrusion(ncp, cont_normal, up, npoints, color_array, twist_array):
    return _gle.gleTwistExtrusion(ncp, cont_normal, up, npoints, color_array, twist_array)
gleTwistExtrusion = _gle.gleTwistExtrusion

def gleTwistExtrusion_c4f(ncp, cont_normal, up, npoints, color_array, twist_array):
    return _gle.gleTwistExtrusion_c4f(ncp, cont_normal, up, npoints, color_array, twist_array)
gleTwistExtrusion_c4f = _gle.gleTwistExtrusion_c4f

def gleSuperExtrusion(ncp, cont_normal, up, npoints, color_array, xform_array):
    return _gle.gleSuperExtrusion(ncp, cont_normal, up, npoints, color_array, xform_array)
gleSuperExtrusion = _gle.gleSuperExtrusion

def gleSuperExtrusion_c4f(ncp, cont_normal1, up, npoints, color_array, xform_array):
    return _gle.gleSuperExtrusion_c4f(ncp, cont_normal1, up, npoints, color_array, xform_array)
gleSuperExtrusion_c4f = _gle.gleSuperExtrusion_c4f

def gleSpiral(ncp, cont_normal, up, startRadius, drdTheta, startZ, dzdTheta, startXform, dXformdTheta, startTheta, sweepTheta):
    return _gle.gleSpiral(ncp, cont_normal, up, startRadius, drdTheta, startZ, dzdTheta, startXform, dXformdTheta, startTheta, sweepTheta)
gleSpiral = _gle.gleSpiral

def gleLathe(ncp, cont_normal, up, startRadius, drdTheta, startZ, dzdTheta, startXform, dXformdTheta, startTheta, sweepTheta):
    return _gle.gleLathe(ncp, cont_normal, up, startRadius, drdTheta, startZ, dzdTheta, startXform, dXformdTheta, startTheta, sweepTheta)
gleLathe = _gle.gleLathe

def gleHelicoid(rToroid, startRadius, drdTheta, startZ, dzdTheta, startXform, dXformdTheta, startTheta, sweepTheta):
    return _gle.gleHelicoid(rToroid, startRadius, drdTheta, startZ, dzdTheta, startXform, dXformdTheta, startTheta, sweepTheta)
gleHelicoid = _gle.gleHelicoid

def gleToroid(rToroid, startRadius, drdTheta, startZ, dzdTheta, startXform, dXformdTheta, startTheta, sweepTheta):
    return _gle.gleToroid(rToroid, startRadius, drdTheta, startZ, dzdTheta, startXform, dXformdTheta, startTheta, sweepTheta)
gleToroid = _gle.gleToroid

def gleScrew(ncp, cont_normal, up, startz, endz, twist):
    return _gle.gleScrew(ncp, cont_normal, up, startz, endz, twist)
gleScrew = _gle.gleScrew

def gleTextureMode(mode):
    return _gle.gleTextureMode(mode)
gleTextureMode = _gle.gleTextureMode

def rot_axis(omega, axis):
    return _gle.rot_axis(omega, axis)
rot_axis = _gle.rot_axis

def rot_about_axis(angle, axis):
    return _gle.rot_about_axis(angle, axis)
rot_about_axis = _gle.rot_about_axis

def rot_omega(axis):
    return _gle.rot_omega(axis)
rot_omega = _gle.rot_omega

def rot_prince(omega, axis):
    return _gle.rot_prince(omega, axis)
rot_prince = _gle.rot_prince

def urot_axis(m, omega, axis):
    return _gle.urot_axis(m, omega, axis)
urot_axis = _gle.urot_axis

def urot_about_axis(m, angle, axis):
    return _gle.urot_about_axis(m, angle, axis)
urot_about_axis = _gle.urot_about_axis

def urot_omega(m, axis):
    return _gle.urot_omega(m, axis)
urot_omega = _gle.urot_omega

def urot_prince(m, omega, axis):
    return _gle.urot_prince(m, omega, axis)
urot_prince = _gle.urot_prince

def uview_direction(m, v21, up):
    return _gle.uview_direction(m, v21, up)
uview_direction = _gle.uview_direction

def uviewpoint(m, v1, v2, up):
    return _gle.uviewpoint(m, v1, v2, up)
uviewpoint = _gle.uviewpoint

def gleFeedBack():
    return _gle.gleFeedBack()
gleFeedBack = _gle.gleFeedBack

def gleFreeFeedbackBuffers():
    return _gle.gleFreeFeedbackBuffers()
gleFreeFeedbackBuffers = _gle.gleFreeFeedbackBuffers
# This file is compatible with both classic and new-style classes.

gleGetTriangleMesh = _gle.gleGetTriangleMesh

