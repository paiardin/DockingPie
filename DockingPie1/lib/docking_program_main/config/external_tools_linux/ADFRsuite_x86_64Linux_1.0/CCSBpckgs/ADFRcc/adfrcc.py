# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_adfrcc', [dirname(__file__)])
        except ImportError:
            import _adfrcc
            return _adfrcc
        if fp is not None:
            try:
                _mod = imp.load_module('_adfrcc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _adfrcc = swig_import_helper()
    del swig_import_helper
else:
    import _adfrcc
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _adfrcc.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _adfrcc.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _adfrcc.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _adfrcc.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _adfrcc.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _adfrcc.SwigPyIterator_equal(self, x)

    def copy(self):
        return _adfrcc.SwigPyIterator_copy(self)

    def next(self):
        return _adfrcc.SwigPyIterator_next(self)

    def __next__(self):
        return _adfrcc.SwigPyIterator___next__(self)

    def previous(self):
        return _adfrcc.SwigPyIterator_previous(self)

    def advance(self, n):
        return _adfrcc.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _adfrcc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _adfrcc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _adfrcc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _adfrcc.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _adfrcc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _adfrcc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _adfrcc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Line(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Line, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Line, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _adfrcc.Line_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _adfrcc.Line___nonzero__(self)

    def __bool__(self):
        return _adfrcc.Line___bool__(self)

    def __len__(self):
        return _adfrcc.Line___len__(self)

    def pop(self):
        return _adfrcc.Line_pop(self)

    def __getslice__(self, i, j):
        return _adfrcc.Line___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _adfrcc.Line___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _adfrcc.Line___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _adfrcc.Line___delitem__(self, *args)

    def __getitem__(self, *args):
        return _adfrcc.Line___getitem__(self, *args)

    def __setitem__(self, *args):
        return _adfrcc.Line___setitem__(self, *args)

    def append(self, x):
        return _adfrcc.Line_append(self, x)

    def empty(self):
        return _adfrcc.Line_empty(self)

    def size(self):
        return _adfrcc.Line_size(self)

    def clear(self):
        return _adfrcc.Line_clear(self)

    def swap(self, v):
        return _adfrcc.Line_swap(self, v)

    def get_allocator(self):
        return _adfrcc.Line_get_allocator(self)

    def begin(self):
        return _adfrcc.Line_begin(self)

    def end(self):
        return _adfrcc.Line_end(self)

    def rbegin(self):
        return _adfrcc.Line_rbegin(self)

    def rend(self):
        return _adfrcc.Line_rend(self)

    def pop_back(self):
        return _adfrcc.Line_pop_back(self)

    def erase(self, *args):
        return _adfrcc.Line_erase(self, *args)

    def __init__(self, *args):
        this = _adfrcc.new_Line(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _adfrcc.Line_push_back(self, x)

    def front(self):
        return _adfrcc.Line_front(self)

    def back(self):
        return _adfrcc.Line_back(self)

    def assign(self, n, x):
        return _adfrcc.Line_assign(self, n, x)

    def resize(self, *args):
        return _adfrcc.Line_resize(self, *args)

    def insert(self, *args):
        return _adfrcc.Line_insert(self, *args)

    def reserve(self, n):
        return _adfrcc.Line_reserve(self, n)

    def capacity(self):
        return _adfrcc.Line_capacity(self)
    __swig_destroy__ = _adfrcc.delete_Line
    __del__ = lambda self: None
Line_swigregister = _adfrcc.Line_swigregister
Line_swigregister(Line)

class MathTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MathTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MathTable, name)
    __repr__ = _swig_repr

    def __init__(self, aTableEntries, aNumEntries, aMinX, aXIncrement):
        this = _adfrcc.new_MathTable(aTableEntries, aNumEntries, aMinX, aXIncrement)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_MathTable
    __del__ = lambda self: None

    def calcFunc(self, x):
        return _adfrcc.MathTable_calcFunc(self, x)

    def getNumBytes(self):
        return _adfrcc.MathTable_getNumBytes(self)
MathTable_swigregister = _adfrcc.MathTable_swigregister
MathTable_swigregister(MathTable)

class MathTablesManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MathTablesManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MathTablesManager, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getManager"] = lambda x: _adfrcc.MathTablesManager_getManager
    if _newclass:
        getManager = staticmethod(_adfrcc.MathTablesManager_getManager)
    __swig_destroy__ = _adfrcc.delete_MathTablesManager
    __del__ = lambda self: None

    def registerTable(self, aTable, k1, k2=0., k3=0., k4=0., k5=0.):
        return _adfrcc.MathTablesManager_registerTable(self, aTable, k1, k2, k3, k4, k5)

    def retrieveTable(self, k1, k2=0., k3=0., k4=0., k5=0.):
        return _adfrcc.MathTablesManager_retrieveTable(self, k1, k2, k3, k4, k5)

    def getNumTables(self):
        return _adfrcc.MathTablesManager_getNumTables(self)

    def getNumBytes(self):
        return _adfrcc.MathTablesManager_getNumBytes(self)
    TABLE_TYPE_VDW = _adfrcc.MathTablesManager_TABLE_TYPE_VDW
    TABLE_TYPE_ESTAT = _adfrcc.MathTablesManager_TABLE_TYPE_ESTAT
    TABLE_TYPE_DESOLVATION = _adfrcc.MathTablesManager_TABLE_TYPE_DESOLVATION
    TABLE_TYPE_GAUSSIAN1 = _adfrcc.MathTablesManager_TABLE_TYPE_GAUSSIAN1
    TABLE_TYPE_GAUSSIAN2 = _adfrcc.MathTablesManager_TABLE_TYPE_GAUSSIAN2
MathTablesManager_swigregister = _adfrcc.MathTablesManager_swigregister
MathTablesManager_swigregister(MathTablesManager)

def MathTablesManager_getManager():
    return _adfrcc.MathTablesManager_getManager()
MathTablesManager_getManager = _adfrcc.MathTablesManager_getManager


_adfrcc.LOG_LEVEL_VERBOSE_swigconstant(_adfrcc)
LOG_LEVEL_VERBOSE = _adfrcc.LOG_LEVEL_VERBOSE

_adfrcc.LOG_LEVEL_DEBUG_swigconstant(_adfrcc)
LOG_LEVEL_DEBUG = _adfrcc.LOG_LEVEL_DEBUG

_adfrcc.LOG_LEVEL_INFO_swigconstant(_adfrcc)
LOG_LEVEL_INFO = _adfrcc.LOG_LEVEL_INFO

_adfrcc.LOG_LEVEL_WARN_swigconstant(_adfrcc)
LOG_LEVEL_WARN = _adfrcc.LOG_LEVEL_WARN

_adfrcc.LOG_LEVEL_ERROR_swigconstant(_adfrcc)
LOG_LEVEL_ERROR = _adfrcc.LOG_LEVEL_ERROR

_adfrcc.LOG_LEVEL_FATAL_swigconstant(_adfrcc)
LOG_LEVEL_FATAL = _adfrcc.LOG_LEVEL_FATAL

_adfrcc.LOG_LEVEL_DISABLED_swigconstant(_adfrcc)
LOG_LEVEL_DISABLED = _adfrcc.LOG_LEVEL_DISABLED
class Logger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Logger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Logger, name)
    __repr__ = _swig_repr
    __swig_getmethods__["setLogLevelVerbose"] = lambda x: _adfrcc.Logger_setLogLevelVerbose
    if _newclass:
        setLogLevelVerbose = staticmethod(_adfrcc.Logger_setLogLevelVerbose)
    __swig_getmethods__["setLogLevelDebug"] = lambda x: _adfrcc.Logger_setLogLevelDebug
    if _newclass:
        setLogLevelDebug = staticmethod(_adfrcc.Logger_setLogLevelDebug)
    __swig_getmethods__["setLogLevelInfo"] = lambda x: _adfrcc.Logger_setLogLevelInfo
    if _newclass:
        setLogLevelInfo = staticmethod(_adfrcc.Logger_setLogLevelInfo)
    __swig_getmethods__["setLogLevelWarn"] = lambda x: _adfrcc.Logger_setLogLevelWarn
    if _newclass:
        setLogLevelWarn = staticmethod(_adfrcc.Logger_setLogLevelWarn)
    __swig_getmethods__["setLogLevelError"] = lambda x: _adfrcc.Logger_setLogLevelError
    if _newclass:
        setLogLevelError = staticmethod(_adfrcc.Logger_setLogLevelError)
    __swig_getmethods__["setLogLevelFatal"] = lambda x: _adfrcc.Logger_setLogLevelFatal
    if _newclass:
        setLogLevelFatal = staticmethod(_adfrcc.Logger_setLogLevelFatal)
    __swig_getmethods__["setLogLevelDisabled"] = lambda x: _adfrcc.Logger_setLogLevelDisabled
    if _newclass:
        setLogLevelDisabled = staticmethod(_adfrcc.Logger_setLogLevelDisabled)
    __swig_getmethods__["setLogLevel"] = lambda x: _adfrcc.Logger_setLogLevel
    if _newclass:
        setLogLevel = staticmethod(_adfrcc.Logger_setLogLevel)
    __swig_getmethods__["getLogLevel"] = lambda x: _adfrcc.Logger_getLogLevel
    if _newclass:
        getLogLevel = staticmethod(_adfrcc.Logger_getLogLevel)
    __swig_setmethods__["logLevel"] = _adfrcc.Logger_logLevel_set
    __swig_getmethods__["logLevel"] = _adfrcc.Logger_logLevel_get
    if _newclass:
        logLevel = _swig_property(_adfrcc.Logger_logLevel_get, _adfrcc.Logger_logLevel_set)
    TEXT_BUFFER_SIZE = _adfrcc.Logger_TEXT_BUFFER_SIZE
    __swig_setmethods__["textBuffer"] = _adfrcc.Logger_textBuffer_set
    __swig_getmethods__["textBuffer"] = _adfrcc.Logger_textBuffer_get
    if _newclass:
        textBuffer = _swig_property(_adfrcc.Logger_textBuffer_get, _adfrcc.Logger_textBuffer_set)

    def __init__(self):
        this = _adfrcc.new_Logger()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_Logger
    __del__ = lambda self: None
Logger_swigregister = _adfrcc.Logger_swigregister
Logger_swigregister(Logger)

def Logger_setLogLevelVerbose():
    return _adfrcc.Logger_setLogLevelVerbose()
Logger_setLogLevelVerbose = _adfrcc.Logger_setLogLevelVerbose

def Logger_setLogLevelDebug():
    return _adfrcc.Logger_setLogLevelDebug()
Logger_setLogLevelDebug = _adfrcc.Logger_setLogLevelDebug

def Logger_setLogLevelInfo():
    return _adfrcc.Logger_setLogLevelInfo()
Logger_setLogLevelInfo = _adfrcc.Logger_setLogLevelInfo

def Logger_setLogLevelWarn():
    return _adfrcc.Logger_setLogLevelWarn()
Logger_setLogLevelWarn = _adfrcc.Logger_setLogLevelWarn

def Logger_setLogLevelError():
    return _adfrcc.Logger_setLogLevelError()
Logger_setLogLevelError = _adfrcc.Logger_setLogLevelError

def Logger_setLogLevelFatal():
    return _adfrcc.Logger_setLogLevelFatal()
Logger_setLogLevelFatal = _adfrcc.Logger_setLogLevelFatal

def Logger_setLogLevelDisabled():
    return _adfrcc.Logger_setLogLevelDisabled()
Logger_setLogLevelDisabled = _adfrcc.Logger_setLogLevelDisabled

def Logger_setLogLevel(aLogLevel):
    return _adfrcc.Logger_setLogLevel(aLogLevel)
Logger_setLogLevel = _adfrcc.Logger_setLogLevel

def Logger_getLogLevel():
    return _adfrcc.Logger_getLogLevel()
Logger_getLogLevel = _adfrcc.Logger_getLogLevel
cvar = _adfrcc.cvar

class Element(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Element, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Element, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["elementWithSymbol"] = lambda x: _adfrcc.Element_elementWithSymbol
    if _newclass:
        elementWithSymbol = staticmethod(_adfrcc.Element_elementWithSymbol)
    __swig_getmethods__["elementWithAtomicNumber"] = lambda x: _adfrcc.Element_elementWithAtomicNumber
    if _newclass:
        elementWithAtomicNumber = staticmethod(_adfrcc.Element_elementWithAtomicNumber)
    __swig_destroy__ = _adfrcc.delete_Element
    __del__ = lambda self: None

    def __eq__(self, other):
        return _adfrcc.Element___eq__(self, other)

    def __ne__(self, other):
        return _adfrcc.Element___ne__(self, other)
    __swig_getmethods__["symbol"] = _adfrcc.Element_symbol_get
    if _newclass:
        symbol = _swig_property(_adfrcc.Element_symbol_get)
    __swig_getmethods__["atomicNumber"] = _adfrcc.Element_atomicNumber_get
    if _newclass:
        atomicNumber = _swig_property(_adfrcc.Element_atomicNumber_get)
Element_swigregister = _adfrcc.Element_swigregister
Element_swigregister(Element)

def Element_elementWithSymbol(symbol):
    return _adfrcc.Element_elementWithSymbol(symbol)
Element_elementWithSymbol = _adfrcc.Element_elementWithSymbol

def Element_elementWithAtomicNumber(atomicNumber):
    return _adfrcc.Element_elementWithAtomicNumber(atomicNumber)
Element_elementWithAtomicNumber = _adfrcc.Element_elementWithAtomicNumber
Element.X = _adfrcc.cvar.Element_X
Element.H = _adfrcc.cvar.Element_H
Element.He = _adfrcc.cvar.Element_He
Element.Li = _adfrcc.cvar.Element_Li
Element.Be = _adfrcc.cvar.Element_Be
Element.B = _adfrcc.cvar.Element_B
Element.C = _adfrcc.cvar.Element_C
Element.N = _adfrcc.cvar.Element_N
Element.O = _adfrcc.cvar.Element_O
Element.F = _adfrcc.cvar.Element_F
Element.Ne = _adfrcc.cvar.Element_Ne
Element.Na = _adfrcc.cvar.Element_Na
Element.Mg = _adfrcc.cvar.Element_Mg
Element.Al = _adfrcc.cvar.Element_Al
Element.Si = _adfrcc.cvar.Element_Si
Element.P = _adfrcc.cvar.Element_P
Element.S = _adfrcc.cvar.Element_S
Element.Cl = _adfrcc.cvar.Element_Cl
Element.Ar = _adfrcc.cvar.Element_Ar
Element.K = _adfrcc.cvar.Element_K
Element.Ca = _adfrcc.cvar.Element_Ca
Element.Sc = _adfrcc.cvar.Element_Sc
Element.Ti = _adfrcc.cvar.Element_Ti
Element.V = _adfrcc.cvar.Element_V
Element.Cr = _adfrcc.cvar.Element_Cr
Element.Mn = _adfrcc.cvar.Element_Mn
Element.Fe = _adfrcc.cvar.Element_Fe
Element.Co = _adfrcc.cvar.Element_Co
Element.Ni = _adfrcc.cvar.Element_Ni
Element.Cu = _adfrcc.cvar.Element_Cu
Element.Zn = _adfrcc.cvar.Element_Zn
Element.Ga = _adfrcc.cvar.Element_Ga
Element.Ge = _adfrcc.cvar.Element_Ge
Element.As = _adfrcc.cvar.Element_As
Element.Se = _adfrcc.cvar.Element_Se
Element.Br = _adfrcc.cvar.Element_Br
Element.Kr = _adfrcc.cvar.Element_Kr
Element.Rb = _adfrcc.cvar.Element_Rb
Element.Sr = _adfrcc.cvar.Element_Sr
Element.Y = _adfrcc.cvar.Element_Y
Element.Zr = _adfrcc.cvar.Element_Zr
Element.Nb = _adfrcc.cvar.Element_Nb
Element.Mo = _adfrcc.cvar.Element_Mo
Element.Tc = _adfrcc.cvar.Element_Tc
Element.Ru = _adfrcc.cvar.Element_Ru
Element.Rh = _adfrcc.cvar.Element_Rh
Element.Pd = _adfrcc.cvar.Element_Pd
Element.Ag = _adfrcc.cvar.Element_Ag
Element.Cd = _adfrcc.cvar.Element_Cd
Element.In = _adfrcc.cvar.Element_In
Element.Sn = _adfrcc.cvar.Element_Sn
Element.Sb = _adfrcc.cvar.Element_Sb
Element.Te = _adfrcc.cvar.Element_Te
Element.I = _adfrcc.cvar.Element_I
Element.Xe = _adfrcc.cvar.Element_Xe
Element.Cs = _adfrcc.cvar.Element_Cs
Element.Ba = _adfrcc.cvar.Element_Ba
Element.La = _adfrcc.cvar.Element_La
Element.Ce = _adfrcc.cvar.Element_Ce
Element.Pr = _adfrcc.cvar.Element_Pr
Element.Nd = _adfrcc.cvar.Element_Nd
Element.Pm = _adfrcc.cvar.Element_Pm
Element.Sm = _adfrcc.cvar.Element_Sm
Element.Eu = _adfrcc.cvar.Element_Eu
Element.Gd = _adfrcc.cvar.Element_Gd
Element.Tb = _adfrcc.cvar.Element_Tb
Element.Dy = _adfrcc.cvar.Element_Dy
Element.Ho = _adfrcc.cvar.Element_Ho
Element.Er = _adfrcc.cvar.Element_Er
Element.Tm = _adfrcc.cvar.Element_Tm
Element.Yb = _adfrcc.cvar.Element_Yb
Element.Lu = _adfrcc.cvar.Element_Lu
Element.Hf = _adfrcc.cvar.Element_Hf
Element.Ta = _adfrcc.cvar.Element_Ta
Element.W = _adfrcc.cvar.Element_W
Element.Re = _adfrcc.cvar.Element_Re
Element.Os = _adfrcc.cvar.Element_Os
Element.Ir = _adfrcc.cvar.Element_Ir
Element.Pt = _adfrcc.cvar.Element_Pt
Element.Au = _adfrcc.cvar.Element_Au
Element.Hg = _adfrcc.cvar.Element_Hg
Element.Tl = _adfrcc.cvar.Element_Tl
Element.Pb = _adfrcc.cvar.Element_Pb
Element.Bi = _adfrcc.cvar.Element_Bi
Element.Po = _adfrcc.cvar.Element_Po
Element.At = _adfrcc.cvar.Element_At
Element.Rn = _adfrcc.cvar.Element_Rn
Element.Fr = _adfrcc.cvar.Element_Fr
Element.Ra = _adfrcc.cvar.Element_Ra
Element.Ac = _adfrcc.cvar.Element_Ac
Element.Th = _adfrcc.cvar.Element_Th
Element.Pa = _adfrcc.cvar.Element_Pa
Element.U = _adfrcc.cvar.Element_U
Element.Np = _adfrcc.cvar.Element_Np
Element.Pu = _adfrcc.cvar.Element_Pu
Element.Am = _adfrcc.cvar.Element_Am
Element.Cm = _adfrcc.cvar.Element_Cm
Element.Bk = _adfrcc.cvar.Element_Bk
Element.Cf = _adfrcc.cvar.Element_Cf
Element.Es = _adfrcc.cvar.Element_Es
Element.Fm = _adfrcc.cvar.Element_Fm
Element.Md = _adfrcc.cvar.Element_Md
Element.No = _adfrcc.cvar.Element_No
Element.Lr = _adfrcc.cvar.Element_Lr
Element.Rf = _adfrcc.cvar.Element_Rf
Element.Db = _adfrcc.cvar.Element_Db
Element.Sg = _adfrcc.cvar.Element_Sg
Element.Bh = _adfrcc.cvar.Element_Bh
Element.Hs = _adfrcc.cvar.Element_Hs
Element.Mt = _adfrcc.cvar.Element_Mt
Element.Ds = _adfrcc.cvar.Element_Ds
Element.Rg = _adfrcc.cvar.Element_Rg
Element.Cn = _adfrcc.cvar.Element_Cn


_adfrcc.HBA_NON_swigconstant(_adfrcc)
HBA_NON = _adfrcc.HBA_NON

_adfrcc.HBA_SPHERE_swigconstant(_adfrcc)
HBA_SPHERE = _adfrcc.HBA_SPHERE

_adfrcc.HBA_DIR1_swigconstant(_adfrcc)
HBA_DIR1 = _adfrcc.HBA_DIR1

_adfrcc.HBA_DIR2_swigconstant(_adfrcc)
HBA_DIR2 = _adfrcc.HBA_DIR2

def isAcceptor(acceptorType):
    return _adfrcc.isAcceptor(acceptorType)
isAcceptor = _adfrcc.isAcceptor

def isDirectionalAcceptor(acceptorType):
    return _adfrcc.isDirectionalAcceptor(acceptorType)
isDirectionalAcceptor = _adfrcc.isDirectionalAcceptor

def numAcceptorDirs(acceptorType):
    return _adfrcc.numAcceptorDirs(acceptorType)
numAcceptorDirs = _adfrcc.numAcceptorDirs

def parseAcceptorType(acceptorType, str):
    return _adfrcc.parseAcceptorType(acceptorType, str)
parseAcceptorType = _adfrcc.parseAcceptorType

def acceptorTypeDebugNameStr(acceptorType):
    return _adfrcc.acceptorTypeDebugNameStr(acceptorType)
acceptorTypeDebugNameStr = _adfrcc.acceptorTypeDebugNameStr

_adfrcc.HBD_NON_swigconstant(_adfrcc)
HBD_NON = _adfrcc.HBD_NON

_adfrcc.HBD_SPHERE_swigconstant(_adfrcc)
HBD_SPHERE = _adfrcc.HBD_SPHERE

_adfrcc.HBD_DIR_swigconstant(_adfrcc)
HBD_DIR = _adfrcc.HBD_DIR

def isDonor(donorType):
    return _adfrcc.isDonor(donorType)
isDonor = _adfrcc.isDonor

def isDirectionalDonor(donorType):
    return _adfrcc.isDirectionalDonor(donorType)
isDirectionalDonor = _adfrcc.isDirectionalDonor

def parseDonorType(donorType, str):
    return _adfrcc.parseDonorType(donorType, str)
parseDonorType = _adfrcc.parseDonorType

def donorTypeDebugNameStr(donorType):
    return _adfrcc.donorTypeDebugNameStr(donorType)
donorTypeDebugNameStr = _adfrcc.donorTypeDebugNameStr
class AtomType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AtomType, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _adfrcc.new_AtomType()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_AtomType
    __del__ = lambda self: None

    def registerOverride(self, otherAtomTypeIndex, equilibriumDist, wellDepth, energyPowN, energyPowM, hbCosAlphaPow, hbCosBetaPow):
        return _adfrcc.AtomType_registerOverride(self, otherAtomTypeIndex, equilibriumDist, wellDepth, energyPowN, energyPowM, hbCosAlphaPow, hbCosBetaPow)

    def finalizeParameters(self):
        return _adfrcc.AtomType_finalizeParameters(self)

    def __eq__(self, other):
        return _adfrcc.AtomType___eq__(self, other)

    def __ne__(self, other):
        return _adfrcc.AtomType___ne__(self, other)

    def hbondsWith(self, other):
        return _adfrcc.AtomType_hbondsWith(self, other)

    def debugNameStr(self):
        return _adfrcc.AtomType_debugNameStr(self)

    def printDebugDescription(self):
        return _adfrcc.AtomType_printDebugDescription(self)
    __swig_setmethods__["atomTypeName"] = _adfrcc.AtomType_atomTypeName_set
    __swig_getmethods__["atomTypeName"] = _adfrcc.AtomType_atomTypeName_get
    if _newclass:
        atomTypeName = _swig_property(_adfrcc.AtomType_atomTypeName_get, _adfrcc.AtomType_atomTypeName_set)
    __swig_setmethods__["atomTypeIndex"] = _adfrcc.AtomType_atomTypeIndex_set
    __swig_getmethods__["atomTypeIndex"] = _adfrcc.AtomType_atomTypeIndex_get
    if _newclass:
        atomTypeIndex = _swig_property(_adfrcc.AtomType_atomTypeIndex_get, _adfrcc.AtomType_atomTypeIndex_set)
    __swig_setmethods__["Rii"] = _adfrcc.AtomType_Rii_set
    __swig_getmethods__["Rii"] = _adfrcc.AtomType_Rii_get
    if _newclass:
        Rii = _swig_property(_adfrcc.AtomType_Rii_get, _adfrcc.AtomType_Rii_set)
    __swig_setmethods__["epsii"] = _adfrcc.AtomType_epsii_set
    __swig_getmethods__["epsii"] = _adfrcc.AtomType_epsii_get
    if _newclass:
        epsii = _swig_property(_adfrcc.AtomType_epsii_get, _adfrcc.AtomType_epsii_set)
    __swig_setmethods__["solvVolume"] = _adfrcc.AtomType_solvVolume_set
    __swig_getmethods__["solvVolume"] = _adfrcc.AtomType_solvVolume_get
    if _newclass:
        solvVolume = _swig_property(_adfrcc.AtomType_solvVolume_get, _adfrcc.AtomType_solvVolume_set)
    __swig_setmethods__["solvParameter"] = _adfrcc.AtomType_solvParameter_set
    __swig_getmethods__["solvParameter"] = _adfrcc.AtomType_solvParameter_get
    if _newclass:
        solvParameter = _swig_property(_adfrcc.AtomType_solvParameter_get, _adfrcc.AtomType_solvParameter_set)
    __swig_setmethods__["RijHb"] = _adfrcc.AtomType_RijHb_set
    __swig_getmethods__["RijHb"] = _adfrcc.AtomType_RijHb_get
    if _newclass:
        RijHb = _swig_property(_adfrcc.AtomType_RijHb_get, _adfrcc.AtomType_RijHb_set)
    __swig_setmethods__["epsijHb"] = _adfrcc.AtomType_epsijHb_set
    __swig_getmethods__["epsijHb"] = _adfrcc.AtomType_epsijHb_get
    if _newclass:
        epsijHb = _swig_property(_adfrcc.AtomType_epsijHb_get, _adfrcc.AtomType_epsijHb_set)
    __swig_setmethods__["hbDonorType"] = _adfrcc.AtomType_hbDonorType_set
    __swig_getmethods__["hbDonorType"] = _adfrcc.AtomType_hbDonorType_get
    if _newclass:
        hbDonorType = _swig_property(_adfrcc.AtomType_hbDonorType_get, _adfrcc.AtomType_hbDonorType_set)
    __swig_setmethods__["hbAcceptorType"] = _adfrcc.AtomType_hbAcceptorType_set
    __swig_getmethods__["hbAcceptorType"] = _adfrcc.AtomType_hbAcceptorType_get
    if _newclass:
        hbAcceptorType = _swig_property(_adfrcc.AtomType_hbAcceptorType_get, _adfrcc.AtomType_hbAcceptorType_set)
    __swig_setmethods__["canHbond"] = _adfrcc.AtomType_canHbond_set
    __swig_getmethods__["canHbond"] = _adfrcc.AtomType_canHbond_get
    if _newclass:
        canHbond = _swig_property(_adfrcc.AtomType_canHbond_get, _adfrcc.AtomType_canHbond_set)
    __swig_setmethods__["isHbDonor"] = _adfrcc.AtomType_isHbDonor_set
    __swig_getmethods__["isHbDonor"] = _adfrcc.AtomType_isHbDonor_get
    if _newclass:
        isHbDonor = _swig_property(_adfrcc.AtomType_isHbDonor_get, _adfrcc.AtomType_isHbDonor_set)
    __swig_setmethods__["isHbDonorNonH"] = _adfrcc.AtomType_isHbDonorNonH_set
    __swig_getmethods__["isHbDonorNonH"] = _adfrcc.AtomType_isHbDonorNonH_get
    if _newclass:
        isHbDonorNonH = _swig_property(_adfrcc.AtomType_isHbDonorNonH_get, _adfrcc.AtomType_isHbDonorNonH_set)
    __swig_setmethods__["isHbDirectionalDonor"] = _adfrcc.AtomType_isHbDirectionalDonor_set
    __swig_getmethods__["isHbDirectionalDonor"] = _adfrcc.AtomType_isHbDirectionalDonor_get
    if _newclass:
        isHbDirectionalDonor = _swig_property(_adfrcc.AtomType_isHbDirectionalDonor_get, _adfrcc.AtomType_isHbDirectionalDonor_set)
    __swig_setmethods__["isHbDirectionalDonorNonH"] = _adfrcc.AtomType_isHbDirectionalDonorNonH_set
    __swig_getmethods__["isHbDirectionalDonorNonH"] = _adfrcc.AtomType_isHbDirectionalDonorNonH_get
    if _newclass:
        isHbDirectionalDonorNonH = _swig_property(_adfrcc.AtomType_isHbDirectionalDonorNonH_get, _adfrcc.AtomType_isHbDirectionalDonorNonH_set)
    __swig_setmethods__["isHbAcceptor"] = _adfrcc.AtomType_isHbAcceptor_set
    __swig_getmethods__["isHbAcceptor"] = _adfrcc.AtomType_isHbAcceptor_get
    if _newclass:
        isHbAcceptor = _swig_property(_adfrcc.AtomType_isHbAcceptor_get, _adfrcc.AtomType_isHbAcceptor_set)
    __swig_setmethods__["isHbDirectionalAcceptor"] = _adfrcc.AtomType_isHbDirectionalAcceptor_set
    __swig_getmethods__["isHbDirectionalAcceptor"] = _adfrcc.AtomType_isHbDirectionalAcceptor_get
    if _newclass:
        isHbDirectionalAcceptor = _swig_property(_adfrcc.AtomType_isHbDirectionalAcceptor_get, _adfrcc.AtomType_isHbDirectionalAcceptor_set)
    __swig_setmethods__["numAcceptorDirs"] = _adfrcc.AtomType_numAcceptorDirs_set
    __swig_getmethods__["numAcceptorDirs"] = _adfrcc.AtomType_numAcceptorDirs_get
    if _newclass:
        numAcceptorDirs = _swig_property(_adfrcc.AtomType_numAcceptorDirs_get, _adfrcc.AtomType_numAcceptorDirs_set)
    __swig_setmethods__["bondIndex"] = _adfrcc.AtomType_bondIndex_set
    __swig_getmethods__["bondIndex"] = _adfrcc.AtomType_bondIndex_get
    if _newclass:
        bondIndex = _swig_property(_adfrcc.AtomType_bondIndex_get, _adfrcc.AtomType_bondIndex_set)
    __swig_setmethods__["includeInScoring"] = _adfrcc.AtomType_includeInScoring_set
    __swig_getmethods__["includeInScoring"] = _adfrcc.AtomType_includeInScoring_get
    if _newclass:
        includeInScoring = _swig_property(_adfrcc.AtomType_includeInScoring_get, _adfrcc.AtomType_includeInScoring_set)
    __swig_setmethods__["element"] = _adfrcc.AtomType_element_set
    __swig_getmethods__["element"] = _adfrcc.AtomType_element_get
    if _newclass:
        element = _swig_property(_adfrcc.AtomType_element_get, _adfrcc.AtomType_element_set)
    __swig_setmethods__["isHydrogen"] = _adfrcc.AtomType_isHydrogen_set
    __swig_getmethods__["isHydrogen"] = _adfrcc.AtomType_isHydrogen_get
    if _newclass:
        isHydrogen = _swig_property(_adfrcc.AtomType_isHydrogen_get, _adfrcc.AtomType_isHydrogen_set)
    __swig_setmethods__["numAtomTypes"] = _adfrcc.AtomType_numAtomTypes_set
    __swig_getmethods__["numAtomTypes"] = _adfrcc.AtomType_numAtomTypes_get
    if _newclass:
        numAtomTypes = _swig_property(_adfrcc.AtomType_numAtomTypes_get, _adfrcc.AtomType_numAtomTypes_set)
    __swig_setmethods__["isHbondingPair"] = _adfrcc.AtomType_isHbondingPair_set
    __swig_getmethods__["isHbondingPair"] = _adfrcc.AtomType_isHbondingPair_get
    if _newclass:
        isHbondingPair = _swig_property(_adfrcc.AtomType_isHbondingPair_get, _adfrcc.AtomType_isHbondingPair_set)
    __swig_setmethods__["equilibriumDist"] = _adfrcc.AtomType_equilibriumDist_set
    __swig_getmethods__["equilibriumDist"] = _adfrcc.AtomType_equilibriumDist_get
    if _newclass:
        equilibriumDist = _swig_property(_adfrcc.AtomType_equilibriumDist_get, _adfrcc.AtomType_equilibriumDist_set)
    __swig_setmethods__["wellDepth"] = _adfrcc.AtomType_wellDepth_set
    __swig_getmethods__["wellDepth"] = _adfrcc.AtomType_wellDepth_get
    if _newclass:
        wellDepth = _swig_property(_adfrcc.AtomType_wellDepth_get, _adfrcc.AtomType_wellDepth_set)
    __swig_setmethods__["energyPowN"] = _adfrcc.AtomType_energyPowN_set
    __swig_getmethods__["energyPowN"] = _adfrcc.AtomType_energyPowN_get
    if _newclass:
        energyPowN = _swig_property(_adfrcc.AtomType_energyPowN_get, _adfrcc.AtomType_energyPowN_set)
    __swig_setmethods__["energyPowM"] = _adfrcc.AtomType_energyPowM_set
    __swig_getmethods__["energyPowM"] = _adfrcc.AtomType_energyPowM_get
    if _newclass:
        energyPowM = _swig_property(_adfrcc.AtomType_energyPowM_get, _adfrcc.AtomType_energyPowM_set)
    __swig_setmethods__["energyFactorN"] = _adfrcc.AtomType_energyFactorN_set
    __swig_getmethods__["energyFactorN"] = _adfrcc.AtomType_energyFactorN_get
    if _newclass:
        energyFactorN = _swig_property(_adfrcc.AtomType_energyFactorN_get, _adfrcc.AtomType_energyFactorN_set)
    __swig_setmethods__["energyFactorM"] = _adfrcc.AtomType_energyFactorM_set
    __swig_getmethods__["energyFactorM"] = _adfrcc.AtomType_energyFactorM_get
    if _newclass:
        energyFactorM = _swig_property(_adfrcc.AtomType_energyFactorM_get, _adfrcc.AtomType_energyFactorM_set)
    __swig_setmethods__["hbCosAlphaPow"] = _adfrcc.AtomType_hbCosAlphaPow_set
    __swig_getmethods__["hbCosAlphaPow"] = _adfrcc.AtomType_hbCosAlphaPow_get
    if _newclass:
        hbCosAlphaPow = _swig_property(_adfrcc.AtomType_hbCosAlphaPow_get, _adfrcc.AtomType_hbCosAlphaPow_set)
    __swig_setmethods__["hbCosBetaPow"] = _adfrcc.AtomType_hbCosBetaPow_set
    __swig_getmethods__["hbCosBetaPow"] = _adfrcc.AtomType_hbCosBetaPow_get
    if _newclass:
        hbCosBetaPow = _swig_property(_adfrcc.AtomType_hbCosBetaPow_get, _adfrcc.AtomType_hbCosBetaPow_set)
    __swig_setmethods__["hbWorstAngleCosToAlphaPow"] = _adfrcc.AtomType_hbWorstAngleCosToAlphaPow_set
    __swig_getmethods__["hbWorstAngleCosToAlphaPow"] = _adfrcc.AtomType_hbWorstAngleCosToAlphaPow_get
    if _newclass:
        hbWorstAngleCosToAlphaPow = _swig_property(_adfrcc.AtomType_hbWorstAngleCosToAlphaPow_get, _adfrcc.AtomType_hbWorstAngleCosToAlphaPow_set)
    __swig_setmethods__["hbWorstAngleCosToBetaPow"] = _adfrcc.AtomType_hbWorstAngleCosToBetaPow_set
    __swig_getmethods__["hbWorstAngleCosToBetaPow"] = _adfrcc.AtomType_hbWorstAngleCosToBetaPow_get
    if _newclass:
        hbWorstAngleCosToBetaPow = _swig_property(_adfrcc.AtomType_hbWorstAngleCosToBetaPow_get, _adfrcc.AtomType_hbWorstAngleCosToBetaPow_set)
AtomType_swigregister = _adfrcc.AtomType_swigregister
AtomType_swigregister(AtomType)

class Randomize(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Randomize, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Randomize, name)
    __repr__ = _swig_repr
    __swig_getmethods__["setRandSeed"] = lambda x: _adfrcc.Randomize_setRandSeed
    if _newclass:
        setRandSeed = staticmethod(_adfrcc.Randomize_setRandSeed)
    __swig_getmethods__["randFloatBetween"] = lambda x: _adfrcc.Randomize_randFloatBetween
    if _newclass:
        randFloatBetween = staticmethod(_adfrcc.Randomize_randFloatBetween)
    __swig_getmethods__["randIntLessThan"] = lambda x: _adfrcc.Randomize_randIntLessThan
    if _newclass:
        randIntLessThan = staticmethod(_adfrcc.Randomize_randIntLessThan)
    __swig_getmethods__["randGaussian"] = lambda x: _adfrcc.Randomize_randGaussian
    if _newclass:
        randGaussian = staticmethod(_adfrcc.Randomize_randGaussian)

    def __init__(self):
        this = _adfrcc.new_Randomize()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_Randomize
    __del__ = lambda self: None
Randomize_swigregister = _adfrcc.Randomize_swigregister
Randomize_swigregister(Randomize)

def Randomize_setRandSeed(seed=-1):
    return _adfrcc.Randomize_setRandSeed(seed)
Randomize_setRandSeed = _adfrcc.Randomize_setRandSeed

def Randomize_randFloatBetween(low, high):
    return _adfrcc.Randomize_randFloatBetween(low, high)
Randomize_randFloatBetween = _adfrcc.Randomize_randFloatBetween

def Randomize_randIntLessThan(lessThan):
    return _adfrcc.Randomize_randIntLessThan(lessThan)
Randomize_randIntLessThan = _adfrcc.Randomize_randIntLessThan

def Randomize_randGaussian(mean, stdDev):
    return _adfrcc.Randomize_randGaussian(mean, stdDev)
Randomize_randGaussian = _adfrcc.Randomize_randGaussian

class NamedObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamedObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NamedObject, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _adfrcc.new_NamedObject()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_NamedObject
    __del__ = lambda self: None

    def setName(self, aName):
        return _adfrcc.NamedObject_setName(self, aName)

    def getName(self):
        return _adfrcc.NamedObject_getName(self)
NamedObject_swigregister = _adfrcc.NamedObject_swigregister
NamedObject_swigregister(NamedObject)

class Parameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parameters, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["getParameters"] = lambda x: _adfrcc.Parameters_getParameters
    if _newclass:
        getParameters = staticmethod(_adfrcc.Parameters_getParameters)
    __swig_destroy__ = _adfrcc.delete_Parameters
    __del__ = lambda self: None

    def loadDefaults(self):
        return _adfrcc.Parameters_loadDefaults(self)

    def loadFromDatFile(self, path):
        return _adfrcc.Parameters_loadFromDatFile(self, path)

    def loadMultiLineText(self, text):
        return _adfrcc.Parameters_loadMultiLineText(self, text)

    def clearAll(self):
        return _adfrcc.Parameters_clearAll(self)

    def setMaxDistVdw(self, aMaxDistVdw):
        return _adfrcc.Parameters_setMaxDistVdw(self, aMaxDistVdw)

    def setMaxDistHb(self, aMaxDistHb):
        return _adfrcc.Parameters_setMaxDistHb(self, aMaxDistHb)

    def setMaxDistEstat(self, aMaxDistEstat):
        return _adfrcc.Parameters_setMaxDistEstat(self, aMaxDistEstat)

    def setMaxDistSolv(self, aMaxDistSolv):
        return _adfrcc.Parameters_setMaxDistSolv(self, aMaxDistSolv)

    def getMaxDistVdw(self):
        return _adfrcc.Parameters_getMaxDistVdw(self)

    def getMaxDistHb(self):
        return _adfrcc.Parameters_getMaxDistHb(self)

    def getMaxDistEstat(self):
        return _adfrcc.Parameters_getMaxDistEstat(self)

    def getMaxDistSolv(self):
        return _adfrcc.Parameters_getMaxDistSolv(self)

    def setUseTables(self, aUseTables):
        return _adfrcc.Parameters_setUseTables(self, aUseTables)

    def setTablesInterpolate(self, aTablesInterpolate):
        return _adfrcc.Parameters_setTablesInterpolate(self, aTablesInterpolate)

    def setTablesIncrement(self, aTablesIncrement):
        return _adfrcc.Parameters_setTablesIncrement(self, aTablesIncrement)

    def setTablesMaxVdw(self, aTablesMaxVdw):
        return _adfrcc.Parameters_setTablesMaxVdw(self, aTablesMaxVdw)

    def setTablesMaxEstat(self, aTablesMaxEstat):
        return _adfrcc.Parameters_setTablesMaxEstat(self, aTablesMaxEstat)

    def setTablesMaxSolv(self, aTablesMaxSolv):
        return _adfrcc.Parameters_setTablesMaxSolv(self, aTablesMaxSolv)

    def getUseTables(self):
        return _adfrcc.Parameters_getUseTables(self)

    def getTablesInterpolate(self):
        return _adfrcc.Parameters_getTablesInterpolate(self)

    def getTablesIncrement(self):
        return _adfrcc.Parameters_getTablesIncrement(self)

    def getTablesMaxVdw(self):
        return _adfrcc.Parameters_getTablesMaxVdw(self)

    def getTablesMaxEstat(self):
        return _adfrcc.Parameters_getTablesMaxEstat(self)

    def getTablesMaxSolv(self):
        return _adfrcc.Parameters_getTablesMaxSolv(self)

    def getAtomTypeByIndex(self, index):
        return _adfrcc.Parameters_getAtomTypeByIndex(self, index)

    def getAtomTypeByName(self, name):
        return _adfrcc.Parameters_getAtomTypeByName(self, name)

    def printDebugDescription(self):
        return _adfrcc.Parameters_printDebugDescription(self)
    __swig_setmethods__["feCoeffVdw"] = _adfrcc.Parameters_feCoeffVdw_set
    __swig_getmethods__["feCoeffVdw"] = _adfrcc.Parameters_feCoeffVdw_get
    if _newclass:
        feCoeffVdw = _swig_property(_adfrcc.Parameters_feCoeffVdw_get, _adfrcc.Parameters_feCoeffVdw_set)
    __swig_setmethods__["feCoeffHbond"] = _adfrcc.Parameters_feCoeffHbond_set
    __swig_getmethods__["feCoeffHbond"] = _adfrcc.Parameters_feCoeffHbond_get
    if _newclass:
        feCoeffHbond = _swig_property(_adfrcc.Parameters_feCoeffHbond_get, _adfrcc.Parameters_feCoeffHbond_set)
    __swig_setmethods__["feCoeffEstat"] = _adfrcc.Parameters_feCoeffEstat_set
    __swig_getmethods__["feCoeffEstat"] = _adfrcc.Parameters_feCoeffEstat_get
    if _newclass:
        feCoeffEstat = _swig_property(_adfrcc.Parameters_feCoeffEstat_get, _adfrcc.Parameters_feCoeffEstat_set)
    __swig_setmethods__["feCoeffDesolv"] = _adfrcc.Parameters_feCoeffDesolv_set
    __swig_getmethods__["feCoeffDesolv"] = _adfrcc.Parameters_feCoeffDesolv_get
    if _newclass:
        feCoeffDesolv = _swig_property(_adfrcc.Parameters_feCoeffDesolv_get, _adfrcc.Parameters_feCoeffDesolv_set)
    __swig_setmethods__["feCoeffTors"] = _adfrcc.Parameters_feCoeffTors_set
    __swig_getmethods__["feCoeffTors"] = _adfrcc.Parameters_feCoeffTors_get
    if _newclass:
        feCoeffTors = _swig_property(_adfrcc.Parameters_feCoeffTors_get, _adfrcc.Parameters_feCoeffTors_set)
    __swig_setmethods__["vdwN"] = _adfrcc.Parameters_vdwN_set
    __swig_getmethods__["vdwN"] = _adfrcc.Parameters_vdwN_get
    if _newclass:
        vdwN = _swig_property(_adfrcc.Parameters_vdwN_get, _adfrcc.Parameters_vdwN_set)
    __swig_setmethods__["vdwM"] = _adfrcc.Parameters_vdwM_set
    __swig_getmethods__["vdwM"] = _adfrcc.Parameters_vdwM_get
    if _newclass:
        vdwM = _swig_property(_adfrcc.Parameters_vdwM_get, _adfrcc.Parameters_vdwM_set)
    __swig_setmethods__["hbN"] = _adfrcc.Parameters_hbN_set
    __swig_getmethods__["hbN"] = _adfrcc.Parameters_hbN_get
    if _newclass:
        hbN = _swig_property(_adfrcc.Parameters_hbN_get, _adfrcc.Parameters_hbN_set)
    __swig_setmethods__["hbM"] = _adfrcc.Parameters_hbM_set
    __swig_getmethods__["hbM"] = _adfrcc.Parameters_hbM_get
    if _newclass:
        hbM = _swig_property(_adfrcc.Parameters_hbM_get, _adfrcc.Parameters_hbM_set)
    __swig_setmethods__["maxDistVdw"] = _adfrcc.Parameters_maxDistVdw_set
    __swig_getmethods__["maxDistVdw"] = _adfrcc.Parameters_maxDistVdw_get
    if _newclass:
        maxDistVdw = _swig_property(_adfrcc.Parameters_maxDistVdw_get, _adfrcc.Parameters_maxDistVdw_set)
    __swig_setmethods__["maxDistHbond"] = _adfrcc.Parameters_maxDistHbond_set
    __swig_getmethods__["maxDistHbond"] = _adfrcc.Parameters_maxDistHbond_get
    if _newclass:
        maxDistHbond = _swig_property(_adfrcc.Parameters_maxDistHbond_get, _adfrcc.Parameters_maxDistHbond_set)
    __swig_setmethods__["maxDistEstat"] = _adfrcc.Parameters_maxDistEstat_set
    __swig_getmethods__["maxDistEstat"] = _adfrcc.Parameters_maxDistEstat_get
    if _newclass:
        maxDistEstat = _swig_property(_adfrcc.Parameters_maxDistEstat_get, _adfrcc.Parameters_maxDistEstat_set)
    __swig_setmethods__["maxDistSolv"] = _adfrcc.Parameters_maxDistSolv_set
    __swig_getmethods__["maxDistSolv"] = _adfrcc.Parameters_maxDistSolv_get
    if _newclass:
        maxDistSolv = _swig_property(_adfrcc.Parameters_maxDistSolv_get, _adfrcc.Parameters_maxDistSolv_set)
    __swig_setmethods__["useTables"] = _adfrcc.Parameters_useTables_set
    __swig_getmethods__["useTables"] = _adfrcc.Parameters_useTables_get
    if _newclass:
        useTables = _swig_property(_adfrcc.Parameters_useTables_get, _adfrcc.Parameters_useTables_set)
    __swig_setmethods__["tablesInterpolate"] = _adfrcc.Parameters_tablesInterpolate_set
    __swig_getmethods__["tablesInterpolate"] = _adfrcc.Parameters_tablesInterpolate_get
    if _newclass:
        tablesInterpolate = _swig_property(_adfrcc.Parameters_tablesInterpolate_get, _adfrcc.Parameters_tablesInterpolate_set)
    __swig_setmethods__["tablesIncrement"] = _adfrcc.Parameters_tablesIncrement_set
    __swig_getmethods__["tablesIncrement"] = _adfrcc.Parameters_tablesIncrement_get
    if _newclass:
        tablesIncrement = _swig_property(_adfrcc.Parameters_tablesIncrement_get, _adfrcc.Parameters_tablesIncrement_set)
    __swig_setmethods__["tablesMaxVdw"] = _adfrcc.Parameters_tablesMaxVdw_set
    __swig_getmethods__["tablesMaxVdw"] = _adfrcc.Parameters_tablesMaxVdw_get
    if _newclass:
        tablesMaxVdw = _swig_property(_adfrcc.Parameters_tablesMaxVdw_get, _adfrcc.Parameters_tablesMaxVdw_set)
    __swig_setmethods__["tablesMaxEstat"] = _adfrcc.Parameters_tablesMaxEstat_set
    __swig_getmethods__["tablesMaxEstat"] = _adfrcc.Parameters_tablesMaxEstat_get
    if _newclass:
        tablesMaxEstat = _swig_property(_adfrcc.Parameters_tablesMaxEstat_get, _adfrcc.Parameters_tablesMaxEstat_set)
    __swig_setmethods__["tablesMaxSolv"] = _adfrcc.Parameters_tablesMaxSolv_set
    __swig_getmethods__["tablesMaxSolv"] = _adfrcc.Parameters_tablesMaxSolv_get
    if _newclass:
        tablesMaxSolv = _swig_property(_adfrcc.Parameters_tablesMaxSolv_get, _adfrcc.Parameters_tablesMaxSolv_set)
    __swig_setmethods__["distSmoothingWidth"] = _adfrcc.Parameters_distSmoothingWidth_set
    __swig_getmethods__["distSmoothingWidth"] = _adfrcc.Parameters_distSmoothingWidth_get
    if _newclass:
        distSmoothingWidth = _swig_property(_adfrcc.Parameters_distSmoothingWidth_get, _adfrcc.Parameters_distSmoothingWidth_set)
    __swig_setmethods__["collisionDist"] = _adfrcc.Parameters_collisionDist_set
    __swig_getmethods__["collisionDist"] = _adfrcc.Parameters_collisionDist_get
    if _newclass:
        collisionDist = _swig_property(_adfrcc.Parameters_collisionDist_get, _adfrcc.Parameters_collisionDist_set)
    __swig_setmethods__["abortIfNumCollisions"] = _adfrcc.Parameters_abortIfNumCollisions_set
    __swig_getmethods__["abortIfNumCollisions"] = _adfrcc.Parameters_abortIfNumCollisions_get
    if _newclass:
        abortIfNumCollisions = _swig_property(_adfrcc.Parameters_abortIfNumCollisions_get, _adfrcc.Parameters_abortIfNumCollisions_set)
    __swig_setmethods__["hbWorstAngle"] = _adfrcc.Parameters_hbWorstAngle_set
    __swig_getmethods__["hbWorstAngle"] = _adfrcc.Parameters_hbWorstAngle_get
    if _newclass:
        hbWorstAngle = _swig_property(_adfrcc.Parameters_hbWorstAngle_get, _adfrcc.Parameters_hbWorstAngle_set)
    __swig_setmethods__["hbWorstAngleCos"] = _adfrcc.Parameters_hbWorstAngleCos_set
    __swig_getmethods__["hbWorstAngleCos"] = _adfrcc.Parameters_hbWorstAngleCos_get
    if _newclass:
        hbWorstAngleCos = _swig_property(_adfrcc.Parameters_hbWorstAngleCos_get, _adfrcc.Parameters_hbWorstAngleCos_set)
    __swig_setmethods__["qasp"] = _adfrcc.Parameters_qasp_set
    __swig_getmethods__["qasp"] = _adfrcc.Parameters_qasp_get
    if _newclass:
        qasp = _swig_property(_adfrcc.Parameters_qasp_get, _adfrcc.Parameters_qasp_set)
    __swig_setmethods__["numAtomTypes"] = _adfrcc.Parameters_numAtomTypes_set
    __swig_getmethods__["numAtomTypes"] = _adfrcc.Parameters_numAtomTypes_get
    if _newclass:
        numAtomTypes = _swig_property(_adfrcc.Parameters_numAtomTypes_get, _adfrcc.Parameters_numAtomTypes_set)
Parameters_swigregister = _adfrcc.Parameters_swigregister
Parameters_swigregister(Parameters)

def Parameters_getParameters():
    return _adfrcc.Parameters_getParameters()
Parameters_getParameters = _adfrcc.Parameters_getParameters

class AtomSetStatic(NamedObject):
    __swig_setmethods__ = {}
    for _s in [NamedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomSetStatic, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomSetStatic, name)
    __repr__ = _swig_repr

    def __init__(self, aNumAtoms, aName):
        this = _adfrcc.new_AtomSetStatic(aNumAtoms, aName)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_AtomSetStatic
    __del__ = lambda self: None

    def setAtomTypes(self, aAtomTypeNames):
        return _adfrcc.AtomSetStatic_setAtomTypes(self, aAtomTypeNames)

    def setCharges(self, aCharges):
        return _adfrcc.AtomSetStatic_setCharges(self, aCharges)

    def setOrigCoords(self, aOrigCoords):
        return _adfrcc.AtomSetStatic_setOrigCoords(self, aOrigCoords)

    def getOrigCoordsPy(self):
        return _adfrcc.AtomSetStatic_getOrigCoordsPy(self)

    def setCovalentBonds(self, aCovalentBonds):
        return _adfrcc.AtomSetStatic_setCovalentBonds(self, aCovalentBonds)

    def setNoScoreHops(self, aNoScoreHops):
        return _adfrcc.AtomSetStatic_setNoScoreHops(self, aNoScoreHops)

    def setPairScorable(self, atomIndex1, atomIndex2, isScorable):
        return _adfrcc.AtomSetStatic_setPairScorable(self, atomIndex1, atomIndex2, isScorable)

    def getPairScorable(self, atomIndex1, atomIndex2):
        return _adfrcc.AtomSetStatic_getPairScorable(self, atomIndex1, atomIndex2)

    def setScorableGrid(self, atomIndex, isScorable):
        return _adfrcc.AtomSetStatic_setScorableGrid(self, atomIndex, isScorable)

    def setScorablePairwise(self, atomIndex, isScorable):
        return _adfrcc.AtomSetStatic_setScorablePairwise(self, atomIndex, isScorable)

    def getScorableGrid(self, atomIndex):
        return _adfrcc.AtomSetStatic_getScorableGrid(self, atomIndex)

    def getScorablePairwise(self, atomIndex):
        return _adfrcc.AtomSetStatic_getScorablePairwise(self, atomIndex)

    def finalizeScorablePairsMatrix(self):
        return _adfrcc.AtomSetStatic_finalizeScorablePairsMatrix(self)

    def setAtomDonorDirs(self, atomIndex, numDirs):
        return _adfrcc.AtomSetStatic_setAtomDonorDirs(self, atomIndex, numDirs)

    def setAtomAcceptorDirs(self, atomIndex, numDirs):
        return _adfrcc.AtomSetStatic_setAtomAcceptorDirs(self, atomIndex, numDirs)

    def finalizeData(self):
        return _adfrcc.AtomSetStatic_finalizeData(self)

    def printDebugDescription(self):
        return _adfrcc.AtomSetStatic_printDebugDescription(self)
    __swig_getmethods__["numAtoms"] = _adfrcc.AtomSetStatic_numAtoms_get
    if _newclass:
        numAtoms = _swig_property(_adfrcc.AtomSetStatic_numAtoms_get)
    __swig_setmethods__["atomTypes"] = _adfrcc.AtomSetStatic_atomTypes_set
    __swig_getmethods__["atomTypes"] = _adfrcc.AtomSetStatic_atomTypes_get
    if _newclass:
        atomTypes = _swig_property(_adfrcc.AtomSetStatic_atomTypes_get, _adfrcc.AtomSetStatic_atomTypes_set)
    __swig_setmethods__["charges"] = _adfrcc.AtomSetStatic_charges_set
    __swig_getmethods__["charges"] = _adfrcc.AtomSetStatic_charges_get
    if _newclass:
        charges = _swig_property(_adfrcc.AtomSetStatic_charges_get, _adfrcc.AtomSetStatic_charges_set)
    __swig_setmethods__["origCoords"] = _adfrcc.AtomSetStatic_origCoords_set
    __swig_getmethods__["origCoords"] = _adfrcc.AtomSetStatic_origCoords_get
    if _newclass:
        origCoords = _swig_property(_adfrcc.AtomSetStatic_origCoords_get, _adfrcc.AtomSetStatic_origCoords_set)
    __swig_setmethods__["covalentBonds"] = _adfrcc.AtomSetStatic_covalentBonds_set
    __swig_getmethods__["covalentBonds"] = _adfrcc.AtomSetStatic_covalentBonds_get
    if _newclass:
        covalentBonds = _swig_property(_adfrcc.AtomSetStatic_covalentBonds_get, _adfrcc.AtomSetStatic_covalentBonds_set)
    __swig_setmethods__["numDonorDirs"] = _adfrcc.AtomSetStatic_numDonorDirs_set
    __swig_getmethods__["numDonorDirs"] = _adfrcc.AtomSetStatic_numDonorDirs_get
    if _newclass:
        numDonorDirs = _swig_property(_adfrcc.AtomSetStatic_numDonorDirs_get, _adfrcc.AtomSetStatic_numDonorDirs_set)
    __swig_setmethods__["numAcceptorDirs"] = _adfrcc.AtomSetStatic_numAcceptorDirs_set
    __swig_getmethods__["numAcceptorDirs"] = _adfrcc.AtomSetStatic_numAcceptorDirs_get
    if _newclass:
        numAcceptorDirs = _swig_property(_adfrcc.AtomSetStatic_numAcceptorDirs_get, _adfrcc.AtomSetStatic_numAcceptorDirs_set)
    __swig_setmethods__["donorDirsIndexes"] = _adfrcc.AtomSetStatic_donorDirsIndexes_set
    __swig_getmethods__["donorDirsIndexes"] = _adfrcc.AtomSetStatic_donorDirsIndexes_get
    if _newclass:
        donorDirsIndexes = _swig_property(_adfrcc.AtomSetStatic_donorDirsIndexes_get, _adfrcc.AtomSetStatic_donorDirsIndexes_set)
    __swig_setmethods__["acceptorDirsIndexes"] = _adfrcc.AtomSetStatic_acceptorDirsIndexes_set
    __swig_getmethods__["acceptorDirsIndexes"] = _adfrcc.AtomSetStatic_acceptorDirsIndexes_get
    if _newclass:
        acceptorDirsIndexes = _swig_property(_adfrcc.AtomSetStatic_acceptorDirsIndexes_get, _adfrcc.AtomSetStatic_acceptorDirsIndexes_set)
    __swig_setmethods__["origHbondDirs"] = _adfrcc.AtomSetStatic_origHbondDirs_set
    __swig_getmethods__["origHbondDirs"] = _adfrcc.AtomSetStatic_origHbondDirs_get
    if _newclass:
        origHbondDirs = _swig_property(_adfrcc.AtomSetStatic_origHbondDirs_get, _adfrcc.AtomSetStatic_origHbondDirs_set)
    __swig_setmethods__["numHbondDirs"] = _adfrcc.AtomSetStatic_numHbondDirs_set
    __swig_getmethods__["numHbondDirs"] = _adfrcc.AtomSetStatic_numHbondDirs_get
    if _newclass:
        numHbondDirs = _swig_property(_adfrcc.AtomSetStatic_numHbondDirs_get, _adfrcc.AtomSetStatic_numHbondDirs_set)
    __swig_setmethods__["noScoreHops"] = _adfrcc.AtomSetStatic_noScoreHops_set
    __swig_getmethods__["noScoreHops"] = _adfrcc.AtomSetStatic_noScoreHops_get
    if _newclass:
        noScoreHops = _swig_property(_adfrcc.AtomSetStatic_noScoreHops_get, _adfrcc.AtomSetStatic_noScoreHops_set)
    __swig_setmethods__["scorablePairsMatrix"] = _adfrcc.AtomSetStatic_scorablePairsMatrix_set
    __swig_getmethods__["scorablePairsMatrix"] = _adfrcc.AtomSetStatic_scorablePairsMatrix_get
    if _newclass:
        scorablePairsMatrix = _swig_property(_adfrcc.AtomSetStatic_scorablePairsMatrix_get, _adfrcc.AtomSetStatic_scorablePairsMatrix_set)
    __swig_setmethods__["scorableGrid"] = _adfrcc.AtomSetStatic_scorableGrid_set
    __swig_getmethods__["scorableGrid"] = _adfrcc.AtomSetStatic_scorableGrid_get
    if _newclass:
        scorableGrid = _swig_property(_adfrcc.AtomSetStatic_scorableGrid_get, _adfrcc.AtomSetStatic_scorableGrid_set)
    __swig_setmethods__["scorablePairwise"] = _adfrcc.AtomSetStatic_scorablePairwise_set
    __swig_getmethods__["scorablePairwise"] = _adfrcc.AtomSetStatic_scorablePairwise_get
    if _newclass:
        scorablePairwise = _swig_property(_adfrcc.AtomSetStatic_scorablePairwise_get, _adfrcc.AtomSetStatic_scorablePairwise_set)
    __swig_setmethods__["isDataFinalized"] = _adfrcc.AtomSetStatic_isDataFinalized_set
    __swig_getmethods__["isDataFinalized"] = _adfrcc.AtomSetStatic_isDataFinalized_get
    if _newclass:
        isDataFinalized = _swig_property(_adfrcc.AtomSetStatic_isDataFinalized_get, _adfrcc.AtomSetStatic_isDataFinalized_set)
AtomSetStatic_swigregister = _adfrcc.AtomSetStatic_swigregister
AtomSetStatic_swigregister(AtomSetStatic)

class AtomSet(NamedObject):
    __swig_setmethods__ = {}
    for _s in [NamedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AtomSet, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AtomSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _adfrcc.new_AtomSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_AtomSet
    __del__ = lambda self: None

    def getAtomSetStatic(self):
        return _adfrcc.AtomSet_getAtomSetStatic(self)

    def updateCoords(self, aCoords):
        return _adfrcc.AtomSet_updateCoords(self, aCoords)

    def getCoordsPy(self):
        return _adfrcc.AtomSet_getCoordsPy(self)

    def updateHbondDirs(self, aHbondDirs):
        return _adfrcc.AtomSet_updateHbondDirs(self, aHbondDirs)

    def printDebugDescription(self):
        return _adfrcc.AtomSet_printDebugDescription(self)
    __swig_getmethods__["atomSetStatic"] = _adfrcc.AtomSet_atomSetStatic_get
    if _newclass:
        atomSetStatic = _swig_property(_adfrcc.AtomSet_atomSetStatic_get)
    __swig_getmethods__["numAtoms"] = _adfrcc.AtomSet_numAtoms_get
    if _newclass:
        numAtoms = _swig_property(_adfrcc.AtomSet_numAtoms_get)
    __swig_setmethods__["coords"] = _adfrcc.AtomSet_coords_set
    __swig_getmethods__["coords"] = _adfrcc.AtomSet_coords_get
    if _newclass:
        coords = _swig_property(_adfrcc.AtomSet_coords_get, _adfrcc.AtomSet_coords_set)
    __swig_setmethods__["hbondDirs"] = _adfrcc.AtomSet_hbondDirs_set
    __swig_getmethods__["hbondDirs"] = _adfrcc.AtomSet_hbondDirs_get
    if _newclass:
        hbondDirs = _swig_property(_adfrcc.AtomSet_hbondDirs_get, _adfrcc.AtomSet_hbondDirs_set)
AtomSet_swigregister = _adfrcc.AtomSet_swigregister
AtomSet_swigregister(AtomSet)

class GridMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GridMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _adfrcc.new_GridMap()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_GridMap
    __del__ = lambda self: None

    def loadFromMapFile(self, aMapType, aMapFileDir, aMapFileName):
        return _adfrcc.GridMap_loadFromMapFile(self, aMapType, aMapFileDir, aMapFileName)

    def saveToMapFile(self, aMapFileDir, aMapFileName):
        return _adfrcc.GridMap_saveToMapFile(self, aMapFileDir, aMapFileName)

    def getMapType(self):
        return _adfrcc.GridMap_getMapType(self)

    def getIsPerAtomType(self):
        return _adfrcc.GridMap_getIsPerAtomType(self)

    def getIsVdwOnly(self):
        return _adfrcc.GridMap_getIsVdwOnly(self)

    def getMapFilePath(self):
        return _adfrcc.GridMap_getMapFilePath(self)

    def getFlexRes(self):
        return _adfrcc.GridMap_getFlexRes(self)

    def getDistBetweenGridPoints(self):
        return _adfrcc.GridMap_getDistBetweenGridPoints(self)

    def getCenterPy(self):
        return _adfrcc.GridMap_getCenterPy(self)

    def getOriginPy(self):
        return _adfrcc.GridMap_getOriginPy(self)

    def getNumGridPointsPy(self):
        return _adfrcc.GridMap_getNumGridPointsPy(self)

    def getGridDataPy(self):
        return _adfrcc.GridMap_getGridDataPy(self)

    def setGridData(self, new3DData):
        return _adfrcc.GridMap_setGridData(self, new3DData)

    def checkConsistency(self, other):
        return _adfrcc.GridMap_checkConsistency(self, other)

    def printDebugDescription(self):
        return _adfrcc.GridMap_printDebugDescription(self)
GridMap_swigregister = _adfrcc.GridMap_swigregister
GridMap_swigregister(GridMap)

class Scorer(NamedObject):
    __swig_setmethods__ = {}
    for _s in [NamedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scorer, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scorer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _adfrcc.delete_Scorer
    __del__ = lambda self: None

    def calculateScores(self):
        return _adfrcc.Scorer_calculateScores(self)

    def getIsScoringDoneYet(self):
        return _adfrcc.Scorer_getIsScoringDoneYet(self)

    def getTotalScore(self):
        return _adfrcc.Scorer_getTotalScore(self)

    def getNumEvals(self):
        return _adfrcc.Scorer_getNumEvals(self)

    def resetNumEvals(self):
        return _adfrcc.Scorer_resetNumEvals(self)

    def printDebugDescription(self):
        return _adfrcc.Scorer_printDebugDescription(self)
Scorer_swigregister = _adfrcc.Scorer_swigregister
Scorer_swigregister(Scorer)

class GridScorer(Scorer):
    __swig_setmethods__ = {}
    for _s in [Scorer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GridScorer, name, value)
    __swig_getmethods__ = {}
    for _s in [Scorer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GridScorer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _adfrcc.new_GridScorer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_GridScorer
    __del__ = lambda self: None

    def initialize(self, *args):
        return _adfrcc.GridScorer_initialize(self, *args)

    def getAtomSet(self):
        return _adfrcc.GridScorer_getAtomSet(self)

    def getNumAtoms(self):
        return _adfrcc.GridScorer_getNumAtoms(self)

    def addGridMap(self, aGridMap):
        return _adfrcc.GridScorer_addGridMap(self, aGridMap)

    def getIsVdwOnly(self):
        return _adfrcc.GridScorer_getIsVdwOnly(self)

    def finalizeData(self):
        return _adfrcc.GridScorer_finalizeData(self)

    def calculateScores(self):
        return _adfrcc.GridScorer_calculateScores(self)

    def getIsAbortedDueToOutOfBounds(self):
        return _adfrcc.GridScorer_getIsAbortedDueToOutOfBounds(self)

    def getOutOfBoundsIndex(self):
        return _adfrcc.GridScorer_getOutOfBoundsIndex(self)

    def getTotalPerAtomTypeScore(self):
        return _adfrcc.GridScorer_getTotalPerAtomTypeScore(self)

    def getTotalEstatScore(self):
        return _adfrcc.GridScorer_getTotalEstatScore(self)

    def getTotalSolvScore(self):
        return _adfrcc.GridScorer_getTotalSolvScore(self)

    def getAtomScore(self, i):
        return _adfrcc.GridScorer_getAtomScore(self, i)

    def getAtomPerAtomTypeScore(self, i):
        return _adfrcc.GridScorer_getAtomPerAtomTypeScore(self, i)

    def getAtomEstatScore(self, i):
        return _adfrcc.GridScorer_getAtomEstatScore(self, i)

    def getAtomSolvScore(self, i):
        return _adfrcc.GridScorer_getAtomSolvScore(self, i)

    def getScoreArray(self):
        return _adfrcc.GridScorer_getScoreArray(self)

    def getPerAtomTypeScoreArray(self):
        return _adfrcc.GridScorer_getPerAtomTypeScoreArray(self)

    def getEstatScoreArray(self):
        return _adfrcc.GridScorer_getEstatScoreArray(self)

    def getSolvScoreArray(self):
        return _adfrcc.GridScorer_getSolvScoreArray(self)

    def printDebugDescription(self):
        return _adfrcc.GridScorer_printDebugDescription(self)
GridScorer_swigregister = _adfrcc.GridScorer_swigregister
GridScorer_swigregister(GridScorer)

class PairwiseScorer(Scorer):
    __swig_setmethods__ = {}
    for _s in [Scorer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairwiseScorer, name, value)
    __swig_getmethods__ = {}
    for _s in [Scorer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PairwiseScorer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _adfrcc.new_PairwiseScorer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_PairwiseScorer
    __del__ = lambda self: None

    def initialize(self, *args):
        return _adfrcc.PairwiseScorer_initialize(self, *args)

    def getAtomSet1(self):
        return _adfrcc.PairwiseScorer_getAtomSet1(self)

    def getAtomSet2(self):
        return _adfrcc.PairwiseScorer_getAtomSet2(self)

    def getNumAtoms1(self):
        return _adfrcc.PairwiseScorer_getNumAtoms1(self)

    def getNumAtoms2(self):
        return _adfrcc.PairwiseScorer_getNumAtoms2(self)

    def getIsSymmetric(self):
        return _adfrcc.PairwiseScorer_getIsSymmetric(self)

    def setIsHbOnly(self, aIsHbOnly):
        return _adfrcc.PairwiseScorer_setIsHbOnly(self, aIsHbOnly)

    def getIsHbOnly(self):
        return _adfrcc.PairwiseScorer_getIsHbOnly(self)

    def calculateScores(self):
        return _adfrcc.PairwiseScorer_calculateScores(self)

    def getIsAbortedDueToCollisions(self):
        return _adfrcc.PairwiseScorer_getIsAbortedDueToCollisions(self)

    def getNumCollisions(self):
        return _adfrcc.PairwiseScorer_getNumCollisions(self)

    def getCollisionAtomIndex1(self):
        return _adfrcc.PairwiseScorer_getCollisionAtomIndex1(self)

    def getCollisionAtomIndex2(self):
        return _adfrcc.PairwiseScorer_getCollisionAtomIndex2(self)

    def getTotalEnergy(self):
        return _adfrcc.PairwiseScorer_getTotalEnergy(self)

    def getTotalVdwEnergy(self):
        return _adfrcc.PairwiseScorer_getTotalVdwEnergy(self)

    def getTotalHbEnergy(self):
        return _adfrcc.PairwiseScorer_getTotalHbEnergy(self)

    def getTotalEstatEnergy(self):
        return _adfrcc.PairwiseScorer_getTotalEstatEnergy(self)

    def getTotalSolvEnergy(self):
        return _adfrcc.PairwiseScorer_getTotalSolvEnergy(self)

    def getAtomEnergy(self, i, fromAtomSet1=True):
        return _adfrcc.PairwiseScorer_getAtomEnergy(self, i, fromAtomSet1)

    def getAtomVdwEnergy(self, i, fromAtomSet1=True):
        return _adfrcc.PairwiseScorer_getAtomVdwEnergy(self, i, fromAtomSet1)

    def getAtomHbEnergy(self, i, fromAtomSet1=True):
        return _adfrcc.PairwiseScorer_getAtomHbEnergy(self, i, fromAtomSet1)

    def getAtomEstatEnergy(self, i, fromAtomSet1=True):
        return _adfrcc.PairwiseScorer_getAtomEstatEnergy(self, i, fromAtomSet1)

    def getAtomSolvEnergy(self, i, fromAtomSet1=True):
        return _adfrcc.PairwiseScorer_getAtomSolvEnergy(self, i, fromAtomSet1)

    def getIsHbondingPair(self, i, j):
        return _adfrcc.PairwiseScorer_getIsHbondingPair(self, i, j)

    def getDistance(self, i, j):
        return _adfrcc.PairwiseScorer_getDistance(self, i, j)

    def getEnergy(self, i, j):
        return _adfrcc.PairwiseScorer_getEnergy(self, i, j)

    def getVdwEnergy(self, i, j):
        return _adfrcc.PairwiseScorer_getVdwEnergy(self, i, j)

    def getHbEnergy(self, i, j):
        return _adfrcc.PairwiseScorer_getHbEnergy(self, i, j)

    def getEstatEnergy(self, i, j):
        return _adfrcc.PairwiseScorer_getEstatEnergy(self, i, j)

    def getSolvEnergy(self, i, j):
        return _adfrcc.PairwiseScorer_getSolvEnergy(self, i, j)

    def getDistanceMatrix(self):
        return _adfrcc.PairwiseScorer_getDistanceMatrix(self)

    def getVdwEnergyMatrix(self):
        return _adfrcc.PairwiseScorer_getVdwEnergyMatrix(self)

    def getHbEnergyMatrix(self):
        return _adfrcc.PairwiseScorer_getHbEnergyMatrix(self)

    def getEstatEnergyMatrix(self):
        return _adfrcc.PairwiseScorer_getEstatEnergyMatrix(self)

    def getSolvEnergyMatrix(self):
        return _adfrcc.PairwiseScorer_getSolvEnergyMatrix(self)

    def getNumVdwPairs(self):
        return _adfrcc.PairwiseScorer_getNumVdwPairs(self)

    def getNumHbPairs(self):
        return _adfrcc.PairwiseScorer_getNumHbPairs(self)

    def getNumEstatPairs(self):
        return _adfrcc.PairwiseScorer_getNumEstatPairs(self)

    def getNumSolvPairs(self):
        return _adfrcc.PairwiseScorer_getNumSolvPairs(self)

    def printDebugDescription(self):
        return _adfrcc.PairwiseScorer_printDebugDescription(self)
PairwiseScorer_swigregister = _adfrcc.PairwiseScorer_swigregister
PairwiseScorer_swigregister(PairwiseScorer)

class RigidReceptorScorer(Scorer):
    __swig_setmethods__ = {}
    for _s in [Scorer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RigidReceptorScorer, name, value)
    __swig_getmethods__ = {}
    for _s in [Scorer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RigidReceptorScorer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _adfrcc.new_RigidReceptorScorer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_RigidReceptorScorer
    __del__ = lambda self: None

    def setLigandAtomSet(self, aLigandAtomSet):
        return _adfrcc.RigidReceptorScorer_setLigandAtomSet(self, aLigandAtomSet)

    def setRrAtomSet(self, aRrAtomSet):
        return _adfrcc.RigidReceptorScorer_setRrAtomSet(self, aRrAtomSet)

    def addGridMap(self, aGridMap):
        return _adfrcc.RigidReceptorScorer_addGridMap(self, aGridMap)

    def getLigandAtomSet(self):
        return _adfrcc.RigidReceptorScorer_getLigandAtomSet(self)

    def getRrAtomSet(self):
        return _adfrcc.RigidReceptorScorer_getRrAtomSet(self)

    def getLlPairwiseScorer(self):
        return _adfrcc.RigidReceptorScorer_getLlPairwiseScorer(self)

    def getLrrPairwiseScorer(self):
        return _adfrcc.RigidReceptorScorer_getLrrPairwiseScorer(self)

    def getLrrGridScorer(self):
        return _adfrcc.RigidReceptorScorer_getLrrGridScorer(self)

    def forceScoreGridOnly(self):
        return _adfrcc.RigidReceptorScorer_forceScoreGridOnly(self)

    def forceScorePairwiseOnly(self):
        return _adfrcc.RigidReceptorScorer_forceScorePairwiseOnly(self)

    def forceScoreMixed(self):
        return _adfrcc.RigidReceptorScorer_forceScoreMixed(self)

    def forceScoreDefault(self):
        return _adfrcc.RigidReceptorScorer_forceScoreDefault(self)

    def setLlScoringEnabled(self, enabled):
        return _adfrcc.RigidReceptorScorer_setLlScoringEnabled(self, enabled)

    def setLrrScoringEnabled(self, enabled):
        return _adfrcc.RigidReceptorScorer_setLrrScoringEnabled(self, enabled)

    def setNeighborRMSDcutoff(self, cutoff, indices):
        return _adfrcc.RigidReceptorScorer_setNeighborRMSDcutoff(self, cutoff, indices)

    def calculateNeighborRMSD(self):
        return _adfrcc.RigidReceptorScorer_calculateNeighborRMSD(self)

    def calculateNeighborRMSDPenalty(self):
        return _adfrcc.RigidReceptorScorer_calculateNeighborRMSDPenalty(self)

    def getNeighborRMSD(self):
        return _adfrcc.RigidReceptorScorer_getNeighborRMSD(self)

    def setNeighborRMSDalpha(self, aa):
        return _adfrcc.RigidReceptorScorer_setNeighborRMSDalpha(self, aa)

    def setLlCoefficient(self, coefficient):
        return _adfrcc.RigidReceptorScorer_setLlCoefficient(self, coefficient)

    def setLrrCoefficient(self, coefficient):
        return _adfrcc.RigidReceptorScorer_setLrrCoefficient(self, coefficient)

    def getLlCoefficient(self):
        return _adfrcc.RigidReceptorScorer_getLlCoefficient(self)

    def getLrrCoefficient(self):
        return _adfrcc.RigidReceptorScorer_getLrrCoefficient(self)

    def calculateScores(self):
        return _adfrcc.RigidReceptorScorer_calculateScores(self)

    def calculateScoresIncludingOffsets(self, ftRoot):
        return _adfrcc.RigidReceptorScorer_calculateScoresIncludingOffsets(self, ftRoot)

    def printDebugDescription(self):
        return _adfrcc.RigidReceptorScorer_printDebugDescription(self)
RigidReceptorScorer_swigregister = _adfrcc.RigidReceptorScorer_swigregister
RigidReceptorScorer_swigregister(RigidReceptorScorer)

class FlexibleReceptorScorer(RigidReceptorScorer):
    __swig_setmethods__ = {}
    for _s in [RigidReceptorScorer]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FlexibleReceptorScorer, name, value)
    __swig_getmethods__ = {}
    for _s in [RigidReceptorScorer]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FlexibleReceptorScorer, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _adfrcc.new_FlexibleReceptorScorer()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_FlexibleReceptorScorer
    __del__ = lambda self: None

    def setFrAtomSet(self, aFrAtomSet):
        return _adfrcc.FlexibleReceptorScorer_setFrAtomSet(self, aFrAtomSet)

    def addGridMap(self, aGridMap):
        return _adfrcc.FlexibleReceptorScorer_addGridMap(self, aGridMap)

    def getFrAtomSet(self):
        return _adfrcc.FlexibleReceptorScorer_getFrAtomSet(self)

    def getFrrrGridScorer(self):
        return _adfrcc.FlexibleReceptorScorer_getFrrrGridScorer(self)

    def getFrrrPairwiseScorer(self):
        return _adfrcc.FlexibleReceptorScorer_getFrrrPairwiseScorer(self)

    def getLfrPairwiseScorer(self):
        return _adfrcc.FlexibleReceptorScorer_getLfrPairwiseScorer(self)

    def getFrfrPairwiseScorer(self):
        return _adfrcc.FlexibleReceptorScorer_getFrfrPairwiseScorer(self)

    def setFrrrScoringEnabled(self, enabled):
        return _adfrcc.FlexibleReceptorScorer_setFrrrScoringEnabled(self, enabled)

    def setLfrScoringEnabled(self, enabled):
        return _adfrcc.FlexibleReceptorScorer_setLfrScoringEnabled(self, enabled)

    def setFrfrScoringEnabled(self, enabled):
        return _adfrcc.FlexibleReceptorScorer_setFrfrScoringEnabled(self, enabled)

    def setFrrrCoefficient(self, coefficient):
        return _adfrcc.FlexibleReceptorScorer_setFrrrCoefficient(self, coefficient)

    def setLfrCoefficient(self, coefficient):
        return _adfrcc.FlexibleReceptorScorer_setLfrCoefficient(self, coefficient)

    def setFrfrCoefficient(self, coefficient):
        return _adfrcc.FlexibleReceptorScorer_setFrfrCoefficient(self, coefficient)

    def getFrrrCoefficient(self):
        return _adfrcc.FlexibleReceptorScorer_getFrrrCoefficient(self)

    def getLfrCoefficient(self):
        return _adfrcc.FlexibleReceptorScorer_getLfrCoefficient(self)

    def getFrfrCoefficient(self):
        return _adfrcc.FlexibleReceptorScorer_getFrfrCoefficient(self)

    def calculateScores(self):
        return _adfrcc.FlexibleReceptorScorer_calculateScores(self)

    def calculateScoresIncludingOffsets(self, ftRoot):
        return _adfrcc.FlexibleReceptorScorer_calculateScoresIncludingOffsets(self, ftRoot)

    def printDebugDescription(self):
        return _adfrcc.FlexibleReceptorScorer_printDebugDescription(self)
FlexibleReceptorScorer_swigregister = _adfrcc.FlexibleReceptorScorer_swigregister
FlexibleReceptorScorer_swigregister(FlexibleReceptorScorer)

class FTBase(NamedObject):
    __swig_setmethods__ = {}
    for _s in [NamedObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTBase, name, value)
    __swig_getmethods__ = {}
    for _s in [NamedObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTBase, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _adfrcc.new_FTBase(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_FTBase
    __del__ = lambda self: None

    def addChild(self, child):
        return _adfrcc.FTBase_addChild(self, child)

    def removeChild(self, child):
        return _adfrcc.FTBase_removeChild(self, child)

    def setBounds(self, aMini, aMaxi):
        return _adfrcc.FTBase_setBounds(self, aMini, aMaxi)

    def setCyclic(self, aIsCyclic):
        return _adfrcc.FTBase_setCyclic(self, aIsCyclic)

    def getCyclicC(self):
        return _adfrcc.FTBase_getCyclicC(self)

    def getCyclicPy(self):
        return _adfrcc.FTBase_getCyclicPy(self)

    def setVariables(self, aValues):
        return _adfrcc.FTBase_setVariables(self, aValues)

    def setGenes(self, genes):
        return _adfrcc.FTBase_setGenes(self, genes)

    def getNumVariables(self):
        return _adfrcc.FTBase_getNumVariables(self)

    def getVariablesC(self):
        return _adfrcc.FTBase_getVariablesC(self)

    def getVariablesCCopy(self, buffer):
        return _adfrcc.FTBase_getVariablesCCopy(self, buffer)

    def getVariablesPy(self):
        return _adfrcc.FTBase_getVariablesPy(self)

    def getGenesCCopy(self, buffer):
        return _adfrcc.FTBase_getGenesCCopy(self, buffer)

    def getGenesPy(self):
        return _adfrcc.FTBase_getGenesPy(self)

    def getGenesForValuesCCopy(self, buffer, values):
        return _adfrcc.FTBase_getGenesForValuesCCopy(self, buffer, values)

    def getGenesForValuesPy(self, values):
        return _adfrcc.FTBase_getGenesForValuesPy(self, values)

    def setIdentityGenes(self, aGenes):
        return _adfrcc.FTBase_setIdentityGenes(self, aGenes)

    def getIdentityGenesC(self):
        return _adfrcc.FTBase_getIdentityGenesC(self)

    def getIdentityGenesCCopy(self, buffer):
        return _adfrcc.FTBase_getIdentityGenesCCopy(self, buffer)

    def getIdentityGenesPy(self):
        return _adfrcc.FTBase_getIdentityGenesPy(self)

    def boundGenesCCopy(self, buffer, genes):
        return _adfrcc.FTBase_boundGenesCCopy(self, buffer, genes)

    def boundGenesPy(self, genes):
        return _adfrcc.FTBase_boundGenesPy(self, genes)

    def setAllowLocalDev(self, aAllowLocalDev):
        return _adfrcc.FTBase_setAllowLocalDev(self, aAllowLocalDev)

    def getAllowLocalDev(self):
        return _adfrcc.FTBase_getAllowLocalDev(self)

    def scaleDeltaAmplitudeBase(self, factor):
        return _adfrcc.FTBase_scaleDeltaAmplitudeBase(self, factor)

    def setDeltaAmplitude(self, aDeltaAmplitude=0.01):
        return _adfrcc.FTBase_setDeltaAmplitude(self, aDeltaAmplitude)

    def resetDeltaAmplitude(self):
        return _adfrcc.FTBase_resetDeltaAmplitude(self)

    def scaleUpAmplitude(self, factor):
        return _adfrcc.FTBase_scaleUpAmplitude(self, factor)

    def scaleDownAmplitude(self, factor):
        return _adfrcc.FTBase_scaleDownAmplitude(self, factor)

    def getDeltaAmplitudeBase(self):
        return _adfrcc.FTBase_getDeltaAmplitudeBase(self)

    def getDeltaAmplitudeModified(self):
        return _adfrcc.FTBase_getDeltaAmplitudeModified(self)

    def genDeviateCCopy(self, buffer, searchRate):
        return _adfrcc.FTBase_genDeviateCCopy(self, buffer, searchRate)

    def genDeviatePy(self, searchRate):
        return _adfrcc.FTBase_genDeviatePy(self, searchRate)

    def getNumDeviated(self):
        return _adfrcc.FTBase_getNumDeviated(self)

    def initialBiasCCopy(self, buffer):
        return _adfrcc.FTBase_initialBiasCCopy(self, buffer)

    def initialBiasPy(self):
        return _adfrcc.FTBase_initialBiasPy(self)

    def biasedDevsCCopy(self, buffer, dev, bias):
        return _adfrcc.FTBase_biasedDevsCCopy(self, buffer, dev, bias)

    def biasedDevsPy(self, dev, bias):
        return _adfrcc.FTBase_biasedDevsPy(self, dev, bias)

    def scaleBiasCCopy(self, buffer, bias, factor):
        return _adfrcc.FTBase_scaleBiasCCopy(self, buffer, bias, factor)

    def scaleBiasPy(self, bias, factor):
        return _adfrcc.FTBase_scaleBiasPy(self, bias, factor)

    def newBiasCCopy(self, buffer, coef1, bias, coef2, dev):
        return _adfrcc.FTBase_newBiasCCopy(self, buffer, coef1, bias, coef2, dev)

    def newBiasPy(self, coef1, bias, coef2, dev):
        return _adfrcc.FTBase_newBiasPy(self, coef1, bias, coef2, dev)

    def applyDeltaCCopy(self, buffer, genes, delta, negateDelta):
        return _adfrcc.FTBase_applyDeltaCCopy(self, buffer, genes, delta, negateDelta)

    def applyDeltaPy(self, genes, delta, negateDelta):
        return _adfrcc.FTBase_applyDeltaPy(self, genes, delta, negateDelta)

    def getMatrixCCopy(self, buffer):
        return _adfrcc.FTBase_getMatrixCCopy(self, buffer)

    def getMatrixPy(self):
        return _adfrcc.FTBase_getMatrixPy(self)

    def getLocalMatrixCCopy(self, buffer):
        return _adfrcc.FTBase_getLocalMatrixCCopy(self, buffer)

    def getLocalMatrixPy(self):
        return _adfrcc.FTBase_getLocalMatrixPy(self)

    def initialize(self):
        return _adfrcc.FTBase_initialize(self)

    def randomize(self):
        return _adfrcc.FTBase_randomize(self)

    def update(self):
        return _adfrcc.FTBase_update(self)

    def getSubtreeEnergyOffset(self, refAtomSet):
        return _adfrcc.FTBase_getSubtreeEnergyOffset(self, refAtomSet)

    def getNodeEnergyOffset(self):
        return _adfrcc.FTBase_getNodeEnergyOffset(self)

    def deleteTree(self):
        return _adfrcc.FTBase_deleteTree(self)
FTBase_swigregister = _adfrcc.FTBase_swigregister
FTBase_swigregister(FTBase)

class FTAtomsNode(FTBase):
    __swig_setmethods__ = {}
    for _s in [FTBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTAtomsNode, name, value)
    __swig_getmethods__ = {}
    for _s in [FTBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTAtomsNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _adfrcc.new_FTAtomsNode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_FTAtomsNode
    __del__ = lambda self: None

    def setAtomIndexes(self, aNumAtoms):
        return _adfrcc.FTAtomsNode_setAtomIndexes(self, aNumAtoms)
FTAtomsNode_swigregister = _adfrcc.FTAtomsNode_swigregister
FTAtomsNode_swigregister(FTAtomsNode)

class FTDeclareAtomSet(FTBase):
    __swig_setmethods__ = {}
    for _s in [FTBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDeclareAtomSet, name, value)
    __swig_getmethods__ = {}
    for _s in [FTBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDeclareAtomSet, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _adfrcc.new_FTDeclareAtomSet(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_FTDeclareAtomSet
    __del__ = lambda self: None

    def setAtomSet(self, aAtomSet):
        return _adfrcc.FTDeclareAtomSet_setAtomSet(self, aAtomSet)
FTDeclareAtomSet_swigregister = _adfrcc.FTDeclareAtomSet_swigregister
FTDeclareAtomSet_swigregister(FTDeclareAtomSet)

class FTDiscreteConformation(FTAtomsNode):
    __swig_setmethods__ = {}
    for _s in [FTAtomsNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDiscreteConformation, name, value)
    __swig_getmethods__ = {}
    for _s in [FTAtomsNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDiscreteConformation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _adfrcc.new_FTDiscreteConformation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_FTDiscreteConformation
    __del__ = lambda self: None

    def setCoords(self, aNumConformations):
        return _adfrcc.FTDiscreteConformation_setCoords(self, aNumConformations)

    def setEnergyOffsets(self, aEnergyOffsets):
        return _adfrcc.FTDiscreteConformation_setEnergyOffsets(self, aEnergyOffsets)

    def getNodeEnergyOffset(self):
        return _adfrcc.FTDiscreteConformation_getNodeEnergyOffset(self)

    def setGenes(self, genes):
        return _adfrcc.FTDiscreteConformation_setGenes(self, genes)

    def initialize(self):
        return _adfrcc.FTDiscreteConformation_initialize(self)

    def randomize(self):
        return _adfrcc.FTDiscreteConformation_randomize(self)
FTDiscreteConformation_swigregister = _adfrcc.FTDiscreteConformation_swigregister
FTDiscreteConformation_swigregister(FTDiscreteConformation)

class FTDiscreteTransformation(FTBase):
    __swig_setmethods__ = {}
    for _s in [FTBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDiscreteTransformation, name, value)
    __swig_getmethods__ = {}
    for _s in [FTBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDiscreteTransformation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _adfrcc.new_FTDiscreteTransformation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_FTDiscreteTransformation
    __del__ = lambda self: None

    def setMatricesData(self, aNumMatrices):
        return _adfrcc.FTDiscreteTransformation_setMatricesData(self, aNumMatrices)

    def getNumMatrices(self):
        return _adfrcc.FTDiscreteTransformation_getNumMatrices(self)

    def getMatricesDataCCopy(self, buffer):
        return _adfrcc.FTDiscreteTransformation_getMatricesDataCCopy(self, buffer)

    def getMatricesDataPy(self):
        return _adfrcc.FTDiscreteTransformation_getMatricesDataPy(self)

    def setMatrixChoice(self, aMatrixChoice):
        return _adfrcc.FTDiscreteTransformation_setMatrixChoice(self, aMatrixChoice)

    def getMatrixChoice(self):
        return _adfrcc.FTDiscreteTransformation_getMatrixChoice(self)
FTDiscreteTransformation_swigregister = _adfrcc.FTDiscreteTransformation_swigregister
FTDiscreteTransformation_swigregister(FTDiscreteTransformation)

class FTDiscreteTranslation(FTBase):
    __swig_setmethods__ = {}
    for _s in [FTBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTDiscreteTranslation, name, value)
    __swig_getmethods__ = {}
    for _s in [FTBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTDiscreteTranslation, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _adfrcc.new_FTDiscreteTranslation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_FTDiscreteTranslation
    __del__ = lambda self: None

    def setPreferredPoints(self, aNumPreferredPoints):
        return _adfrcc.FTDiscreteTranslation_setPreferredPoints(self, aNumPreferredPoints)

    def setBounds(self, aMini, aMaxi):
        return _adfrcc.FTDiscreteTranslation_setBounds(self, aMini, aMaxi)

    def initialize(self):
        return _adfrcc.FTDiscreteTranslation_initialize(self)

    def randomize(self):
        return _adfrcc.FTDiscreteTranslation_randomize(self)
FTDiscreteTranslation_swigregister = _adfrcc.FTDiscreteTranslation_swigregister
FTDiscreteTranslation_swigregister(FTDiscreteTranslation)

class FTRotationAboutBond(FTBase):
    __swig_setmethods__ = {}
    for _s in [FTBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTRotationAboutBond, name, value)
    __swig_getmethods__ = {}
    for _s in [FTBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTRotationAboutBond, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _adfrcc.new_FTRotationAboutBond(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_FTRotationAboutBond
    __del__ = lambda self: None

    def setAxisAtomIndexes(self, aAxisAtomIndex1, aAxisAtomIndex2):
        return _adfrcc.FTRotationAboutBond_setAxisAtomIndexes(self, aAxisAtomIndex1, aAxisAtomIndex2)

    def setDeltaAmplitude(self, aDeltaAmplitude=2.):
        return _adfrcc.FTRotationAboutBond_setDeltaAmplitude(self, aDeltaAmplitude)

    def initialize(self):
        return _adfrcc.FTRotationAboutBond_initialize(self)

    def randomize(self):
        return _adfrcc.FTRotationAboutBond_randomize(self)
FTRotationAboutBond_swigregister = _adfrcc.FTRotationAboutBond_swigregister
FTRotationAboutBond_swigregister(FTRotationAboutBond)

class FTRotationAboutPointQuat(FTBase):
    __swig_setmethods__ = {}
    for _s in [FTBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTRotationAboutPointQuat, name, value)
    __swig_getmethods__ = {}
    for _s in [FTBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTRotationAboutPointQuat, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _adfrcc.new_FTRotationAboutPointQuat(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_FTRotationAboutPointQuat
    __del__ = lambda self: None

    def setRotPoint(self, x, y, z):
        return _adfrcc.FTRotationAboutPointQuat_setRotPoint(self, x, y, z)

    def setVariables(self, aValues):
        return _adfrcc.FTRotationAboutPointQuat_setVariables(self, aValues)

    def setGenes(self, genes):
        return _adfrcc.FTRotationAboutPointQuat_setGenes(self, genes)

    def initialize(self):
        return _adfrcc.FTRotationAboutPointQuat_initialize(self)

    def randomize(self):
        return _adfrcc.FTRotationAboutPointQuat_randomize(self)
FTRotationAboutPointQuat_swigregister = _adfrcc.FTRotationAboutPointQuat_swigregister
FTRotationAboutPointQuat_swigregister(FTRotationAboutPointQuat)

class FTTorsion(FTBase):
    __swig_setmethods__ = {}
    for _s in [FTBase]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FTTorsion, name, value)
    __swig_getmethods__ = {}
    for _s in [FTBase]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, FTTorsion, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _adfrcc.new_FTTorsion(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_FTTorsion
    __del__ = lambda self: None

    def setDihedralAtomIndexes(self, aAtomIndex1, aAtomIndex2, aAtomIndex3, aAtomIndex4, aAtomSet=None):
        return _adfrcc.FTTorsion_setDihedralAtomIndexes(self, aAtomIndex1, aAtomIndex2, aAtomIndex3, aAtomIndex4, aAtomSet)

    def getDihedralAtomIndexesC(self):
        return _adfrcc.FTTorsion_getDihedralAtomIndexesC(self)

    def getDihedralAtomIndexesCCopy(self, buffer):
        return _adfrcc.FTTorsion_getDihedralAtomIndexesCCopy(self, buffer)

    def getDihedralAtomIndexesPy(self):
        return _adfrcc.FTTorsion_getDihedralAtomIndexesPy(self)

    def setDeltaAmplitude(self, aDeltaAmplitude=2.):
        return _adfrcc.FTTorsion_setDeltaAmplitude(self, aDeltaAmplitude)

    def initialize(self):
        return _adfrcc.FTTorsion_initialize(self)

    def randomize(self):
        return _adfrcc.FTTorsion_randomize(self)

    def getOrigAngle(self):
        return _adfrcc.FTTorsion_getOrigAngle(self)
FTTorsion_swigregister = _adfrcc.FTTorsion_swigregister
FTTorsion_swigregister(FTTorsion)

class Genome(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Genome, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Genome, name)
    __repr__ = _swig_repr

    def __init__(self, aNumMotionNodes, aFtRoot, aScorer):
        this = _adfrcc.new_Genome(aNumMotionNodes, aFtRoot, aScorer)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_Genome
    __del__ = lambda self: None

    def getNumMotionNodes(self):
        return _adfrcc.Genome_getNumMotionNodes(self)

    def getMotionNodeAtIndex(self, index):
        return _adfrcc.Genome_getMotionNodeAtIndex(self, index)

    def getNumVariables(self):
        return _adfrcc.Genome_getNumVariables(self)

    def setVariables(self, aValues):
        return _adfrcc.Genome_setVariables(self, aValues)

    def setGenes(self, genes):
        return _adfrcc.Genome_setGenes(self, genes)

    def getVariablesCCopy(self, buffer):
        return _adfrcc.Genome_getVariablesCCopy(self, buffer)

    def getVariablesPy(self):
        return _adfrcc.Genome_getVariablesPy(self)

    def getGenesCCopy(self, buffer):
        return _adfrcc.Genome_getGenesCCopy(self, buffer)

    def getGenesPy(self):
        return _adfrcc.Genome_getGenesPy(self)

    def getGenesForValuesCCopy(self, buffer, values):
        return _adfrcc.Genome_getGenesForValuesCCopy(self, buffer, values)

    def getGenesForValuesPy(self, values):
        return _adfrcc.Genome_getGenesForValuesPy(self, values)

    def getIdentityGenesCCopy(self, buffer):
        return _adfrcc.Genome_getIdentityGenesCCopy(self, buffer)

    def getIdentityGenesPy(self):
        return _adfrcc.Genome_getIdentityGenesPy(self)

    def boundGenesCCopy(self, buffer, genes):
        return _adfrcc.Genome_boundGenesCCopy(self, buffer, genes)

    def boundGenesPy(self, genes):
        return _adfrcc.Genome_boundGenesPy(self, genes)

    def scaleDeltaAmplitudeBase(self, factor):
        return _adfrcc.Genome_scaleDeltaAmplitudeBase(self, factor)

    def resetDeltaAmplitude(self):
        return _adfrcc.Genome_resetDeltaAmplitude(self)

    def scaleUpAmplitude(self, factor):
        return _adfrcc.Genome_scaleUpAmplitude(self, factor)

    def scaleDownAmplitude(self, factor):
        return _adfrcc.Genome_scaleDownAmplitude(self, factor)

    def genDeviateCCopy(self, buffer, searchRate):
        return _adfrcc.Genome_genDeviateCCopy(self, buffer, searchRate)

    def genDeviatePy(self, searchRate):
        return _adfrcc.Genome_genDeviatePy(self, searchRate)

    def getNumDeviated(self):
        return _adfrcc.Genome_getNumDeviated(self)

    def initialBiasCCopy(self, buffer):
        return _adfrcc.Genome_initialBiasCCopy(self, buffer)

    def initialBiasPy(self):
        return _adfrcc.Genome_initialBiasPy(self)

    def biasedDevsCCopy(self, buffer, dev, bias):
        return _adfrcc.Genome_biasedDevsCCopy(self, buffer, dev, bias)

    def biasedDevsPy(self, dev, bias):
        return _adfrcc.Genome_biasedDevsPy(self, dev, bias)

    def scaleBiasCCopy(self, buffer, bias, factor):
        return _adfrcc.Genome_scaleBiasCCopy(self, buffer, bias, factor)

    def scaleBiasPy(self, bias, factor):
        return _adfrcc.Genome_scaleBiasPy(self, bias, factor)

    def newBiasCCopy(self, buffer, coef1, bias, coef2, dev):
        return _adfrcc.Genome_newBiasCCopy(self, buffer, coef1, bias, coef2, dev)

    def newBiasPy(self, coef1, bias, coef2, dev):
        return _adfrcc.Genome_newBiasPy(self, coef1, bias, coef2, dev)

    def applyDeltaCCopy(self, buffer, genes, delta, negateDelta):
        return _adfrcc.Genome_applyDeltaCCopy(self, buffer, genes, delta, negateDelta)

    def applyDeltaPy(self, genes, delta, negateDelta):
        return _adfrcc.Genome_applyDeltaPy(self, genes, delta, negateDelta)

    def initialize(self):
        return _adfrcc.Genome_initialize(self)

    def randomize(self):
        return _adfrcc.Genome_randomize(self)

    def getScorer(self):
        return _adfrcc.Genome_getScorer(self)

    def calculateScores(self):
        return _adfrcc.Genome_calculateScores(self)

    def getTotalScore(self):
        return _adfrcc.Genome_getTotalScore(self)
Genome_swigregister = _adfrcc.Genome_swigregister
Genome_swigregister(Genome)

class Individual(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Individual, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Individual, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _adfrcc.new_Individual(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_Individual
    __del__ = lambda self: None

    def getGenome(self):
        return _adfrcc.Individual_getGenome(self)

    def getNumVariables(self):
        return _adfrcc.Individual_getNumVariables(self)

    def setGenes(self, aGenes):
        return _adfrcc.Individual_setGenes(self, aGenes)

    def getGenesC(self):
        return _adfrcc.Individual_getGenesC(self)

    def getGenesCCopy(self, buffer):
        return _adfrcc.Individual_getGenesCCopy(self, buffer)

    def getGenesPy(self):
        return _adfrcc.Individual_getGenesPy(self)

    def initialize(self):
        return _adfrcc.Individual_initialize(self)

    def randomize(self):
        return _adfrcc.Individual_randomize(self)

    def calculateScores(self):
        return _adfrcc.Individual_calculateScores(self)

    def getTotalScore(self):
        return _adfrcc.Individual_getTotalScore(self)
Individual_swigregister = _adfrcc.Individual_swigregister
Individual_swigregister(Individual)

class SolisWets(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolisWets, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SolisWets, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getSingleton"] = lambda x: _adfrcc.SolisWets_getSingleton
    if _newclass:
        getSingleton = staticmethod(_adfrcc.SolisWets_getSingleton)

    def __init__(self):
        this = _adfrcc.new_SolisWets()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_SolisWets
    __del__ = lambda self: None

    def setMaxSteps(self, aMaxSteps):
        return _adfrcc.SolisWets_setMaxSteps(self, aMaxSteps)

    def getMaxSteps(self):
        return _adfrcc.SolisWets_getMaxSteps(self)

    def setMaxSuccess(self, aMaxSuccess):
        return _adfrcc.SolisWets_setMaxSuccess(self, aMaxSuccess)

    def getMaxSuccess(self):
        return _adfrcc.SolisWets_getMaxSuccess(self)

    def setMaxFail(self, aMaxFail):
        return _adfrcc.SolisWets_setMaxFail(self, aMaxFail)

    def getMaxFail(self):
        return _adfrcc.SolisWets_getMaxFail(self)

    def setFactorExpansion(self, aFactorExpansion):
        return _adfrcc.SolisWets_setFactorExpansion(self, aFactorExpansion)

    def getFactorExpansion(self):
        return _adfrcc.SolisWets_getFactorExpansion(self)

    def setFactorContraction(self, aFactorContraction):
        return _adfrcc.SolisWets_setFactorContraction(self, aFactorContraction)

    def getFactorContraction(self):
        return _adfrcc.SolisWets_getFactorContraction(self)

    def setSearchRate(self, aSearchRate):
        return _adfrcc.SolisWets_setSearchRate(self, aSearchRate)

    def getSearchRate(self):
        return _adfrcc.SolisWets_getSearchRate(self)

    def minimize(self, individual, nbSteps, noImproveStop, sw_max_steps, sw_MAX_FAIL, sw_searchRate):
        return _adfrcc.SolisWets_minimize(self, individual, nbSteps, noImproveStop, sw_max_steps, sw_MAX_FAIL, sw_searchRate)

    def search(self, individual):
        return _adfrcc.SolisWets_search(self, individual)

    def getNumVariables(self):
        return _adfrcc.SolisWets_getNumVariables(self)

    def getBestGenesC(self):
        return _adfrcc.SolisWets_getBestGenesC(self)

    def getBestGenesCCopy(self, buffer):
        return _adfrcc.SolisWets_getBestGenesCCopy(self, buffer)

    def getBestGenesPy(self):
        return _adfrcc.SolisWets_getBestGenesPy(self)

    def getBestScore(self):
        return _adfrcc.SolisWets_getBestScore(self)

    def getSteps(self):
        return _adfrcc.SolisWets_getSteps(self)

    def setEnableDebugOutput(self, enable):
        return _adfrcc.SolisWets_setEnableDebugOutput(self, enable)
SolisWets_swigregister = _adfrcc.SolisWets_swigregister
SolisWets_swigregister(SolisWets)

def SolisWets_getSingleton():
    return _adfrcc.SolisWets_getSingleton()
SolisWets_getSingleton = _adfrcc.SolisWets_getSingleton

class AddGradients(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddGradients, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AddGradients, name)
    __repr__ = _swig_repr

    def __init__(self, gradL=5.0):
        this = _adfrcc.new_AddGradients(gradL)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _adfrcc.delete_AddGradients
    __del__ = lambda self: None
    __swig_setmethods__["gradLow"] = _adfrcc.AddGradients_gradLow_set
    __swig_getmethods__["gradLow"] = _adfrcc.AddGradients_gradLow_get
    if _newclass:
        gradLow = _swig_property(_adfrcc.AddGradients_gradLow_get, _adfrcc.AddGradients_gradLow_set)
    __swig_setmethods__["clusters"] = _adfrcc.AddGradients_clusters_set
    __swig_getmethods__["clusters"] = _adfrcc.AddGradients_clusters_get
    if _newclass:
        clusters = _swig_property(_adfrcc.AddGradients_clusters_get, _adfrcc.AddGradients_clusters_set)

    def processMap(self, gridMap, gridInds, spacing, nneighb, cutOffValue, errorCut):
        return _adfrcc.AddGradients_processMap(self, gridMap, gridInds, spacing, nneighb, cutOffValue, errorCut)

    def processMaps(self, maps, spacing, nneighb, cutOffValue, errorCut, filename):
        return _adfrcc.AddGradients_processMaps(self, maps, spacing, nneighb, cutOffValue, errorCut, filename)

    def testGridOrder(self, gridMap):
        return _adfrcc.AddGradients_testGridOrder(self, gridMap)
AddGradients_swigregister = _adfrcc.AddGradients_swigregister
AddGradients_swigregister(AddGradients)


def get_ompthread_count():
    return _adfrcc.get_ompthread_count()
get_ompthread_count = _adfrcc.get_ompthread_count
# This file is compatible with both classic and new-style classes.

openmp_enabled = cvar.openmp_enabled

