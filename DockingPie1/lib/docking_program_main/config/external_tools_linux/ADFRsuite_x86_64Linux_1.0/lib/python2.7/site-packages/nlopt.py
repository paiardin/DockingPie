# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
NLopt is a multi-language library for nonlinear optimization (local or
global, with or without derivatives, and supporting nonlinear
constraints).  Complete documentation, including a Python tutorial,
can be found at the NLopt web page: http://ab-initio.mit.edu/nlopt
"""


from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nlopt', [dirname(__file__)])
        except ImportError:
            import _nlopt
            return _nlopt
        if fp is not None:
            try:
                _mod = imp.load_module('_nlopt', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nlopt = swig_import_helper()
    del swig_import_helper
else:
    import _nlopt
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nlopt.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _nlopt.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _nlopt.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _nlopt.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _nlopt.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _nlopt.SwigPyIterator_equal(self, x)

    def copy(self):
        return _nlopt.SwigPyIterator_copy(self)

    def next(self):
        return _nlopt.SwigPyIterator_next(self)

    def __next__(self):
        return _nlopt.SwigPyIterator___next__(self)

    def previous(self):
        return _nlopt.SwigPyIterator_previous(self)

    def advance(self, n):
        return _nlopt.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _nlopt.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _nlopt.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _nlopt.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _nlopt.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _nlopt.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _nlopt.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _nlopt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class nlopt_doublevector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nlopt_doublevector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nlopt_doublevector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _nlopt.nlopt_doublevector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _nlopt.nlopt_doublevector___nonzero__(self)

    def __bool__(self):
        return _nlopt.nlopt_doublevector___bool__(self)

    def __len__(self):
        return _nlopt.nlopt_doublevector___len__(self)

    def pop(self):
        return _nlopt.nlopt_doublevector_pop(self)

    def __getslice__(self, i, j):
        return _nlopt.nlopt_doublevector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _nlopt.nlopt_doublevector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _nlopt.nlopt_doublevector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _nlopt.nlopt_doublevector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _nlopt.nlopt_doublevector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _nlopt.nlopt_doublevector___setitem__(self, *args)

    def append(self, x):
        return _nlopt.nlopt_doublevector_append(self, x)

    def empty(self):
        return _nlopt.nlopt_doublevector_empty(self)

    def size(self):
        return _nlopt.nlopt_doublevector_size(self)

    def clear(self):
        return _nlopt.nlopt_doublevector_clear(self)

    def swap(self, v):
        return _nlopt.nlopt_doublevector_swap(self, v)

    def get_allocator(self):
        return _nlopt.nlopt_doublevector_get_allocator(self)

    def begin(self):
        return _nlopt.nlopt_doublevector_begin(self)

    def end(self):
        return _nlopt.nlopt_doublevector_end(self)

    def rbegin(self):
        return _nlopt.nlopt_doublevector_rbegin(self)

    def rend(self):
        return _nlopt.nlopt_doublevector_rend(self)

    def pop_back(self):
        return _nlopt.nlopt_doublevector_pop_back(self)

    def erase(self, *args):
        return _nlopt.nlopt_doublevector_erase(self, *args)

    def __init__(self, *args):
        this = _nlopt.new_nlopt_doublevector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _nlopt.nlopt_doublevector_push_back(self, x)

    def front(self):
        return _nlopt.nlopt_doublevector_front(self)

    def back(self):
        return _nlopt.nlopt_doublevector_back(self)

    def assign(self, n, x):
        return _nlopt.nlopt_doublevector_assign(self, n, x)

    def resize(self, *args):
        return _nlopt.nlopt_doublevector_resize(self, *args)

    def insert(self, *args):
        return _nlopt.nlopt_doublevector_insert(self, *args)

    def reserve(self, n):
        return _nlopt.nlopt_doublevector_reserve(self, n)

    def capacity(self):
        return _nlopt.nlopt_doublevector_capacity(self)
    __swig_destroy__ = _nlopt.delete_nlopt_doublevector
    __del__ = lambda self: None
nlopt_doublevector_swigregister = _nlopt.nlopt_doublevector_swigregister
nlopt_doublevector_swigregister(nlopt_doublevector)

ForcedStop = _nlopt.ForcedStop
RoundoffLimited = _nlopt.RoundoffLimited
__version__ = str(_nlopt.version_major())+'.'+str(_nlopt.version_minor())+'.'+str(_nlopt.version_bugfix())


def nlopt_get_initial_step(opt, dx):
    return _nlopt.nlopt_get_initial_step(opt, dx)
nlopt_get_initial_step = _nlopt.nlopt_get_initial_step

_nlopt.GN_DIRECT_swigconstant(_nlopt)
GN_DIRECT = _nlopt.GN_DIRECT

_nlopt.GN_DIRECT_L_swigconstant(_nlopt)
GN_DIRECT_L = _nlopt.GN_DIRECT_L

_nlopt.GN_DIRECT_L_RAND_swigconstant(_nlopt)
GN_DIRECT_L_RAND = _nlopt.GN_DIRECT_L_RAND

_nlopt.GN_DIRECT_NOSCAL_swigconstant(_nlopt)
GN_DIRECT_NOSCAL = _nlopt.GN_DIRECT_NOSCAL

_nlopt.GN_DIRECT_L_NOSCAL_swigconstant(_nlopt)
GN_DIRECT_L_NOSCAL = _nlopt.GN_DIRECT_L_NOSCAL

_nlopt.GN_DIRECT_L_RAND_NOSCAL_swigconstant(_nlopt)
GN_DIRECT_L_RAND_NOSCAL = _nlopt.GN_DIRECT_L_RAND_NOSCAL

_nlopt.GN_ORIG_DIRECT_swigconstant(_nlopt)
GN_ORIG_DIRECT = _nlopt.GN_ORIG_DIRECT

_nlopt.GN_ORIG_DIRECT_L_swigconstant(_nlopt)
GN_ORIG_DIRECT_L = _nlopt.GN_ORIG_DIRECT_L

_nlopt.GD_STOGO_swigconstant(_nlopt)
GD_STOGO = _nlopt.GD_STOGO

_nlopt.GD_STOGO_RAND_swigconstant(_nlopt)
GD_STOGO_RAND = _nlopt.GD_STOGO_RAND

_nlopt.LD_LBFGS_NOCEDAL_swigconstant(_nlopt)
LD_LBFGS_NOCEDAL = _nlopt.LD_LBFGS_NOCEDAL

_nlopt.LD_LBFGS_swigconstant(_nlopt)
LD_LBFGS = _nlopt.LD_LBFGS

_nlopt.LN_PRAXIS_swigconstant(_nlopt)
LN_PRAXIS = _nlopt.LN_PRAXIS

_nlopt.LD_VAR1_swigconstant(_nlopt)
LD_VAR1 = _nlopt.LD_VAR1

_nlopt.LD_VAR2_swigconstant(_nlopt)
LD_VAR2 = _nlopt.LD_VAR2

_nlopt.LD_TNEWTON_swigconstant(_nlopt)
LD_TNEWTON = _nlopt.LD_TNEWTON

_nlopt.LD_TNEWTON_RESTART_swigconstant(_nlopt)
LD_TNEWTON_RESTART = _nlopt.LD_TNEWTON_RESTART

_nlopt.LD_TNEWTON_PRECOND_swigconstant(_nlopt)
LD_TNEWTON_PRECOND = _nlopt.LD_TNEWTON_PRECOND

_nlopt.LD_TNEWTON_PRECOND_RESTART_swigconstant(_nlopt)
LD_TNEWTON_PRECOND_RESTART = _nlopt.LD_TNEWTON_PRECOND_RESTART

_nlopt.GN_CRS2_LM_swigconstant(_nlopt)
GN_CRS2_LM = _nlopt.GN_CRS2_LM

_nlopt.GN_MLSL_swigconstant(_nlopt)
GN_MLSL = _nlopt.GN_MLSL

_nlopt.GD_MLSL_swigconstant(_nlopt)
GD_MLSL = _nlopt.GD_MLSL

_nlopt.GN_MLSL_LDS_swigconstant(_nlopt)
GN_MLSL_LDS = _nlopt.GN_MLSL_LDS

_nlopt.GD_MLSL_LDS_swigconstant(_nlopt)
GD_MLSL_LDS = _nlopt.GD_MLSL_LDS

_nlopt.LD_MMA_swigconstant(_nlopt)
LD_MMA = _nlopt.LD_MMA

_nlopt.LN_COBYLA_swigconstant(_nlopt)
LN_COBYLA = _nlopt.LN_COBYLA

_nlopt.LN_NEWUOA_swigconstant(_nlopt)
LN_NEWUOA = _nlopt.LN_NEWUOA

_nlopt.LN_NEWUOA_BOUND_swigconstant(_nlopt)
LN_NEWUOA_BOUND = _nlopt.LN_NEWUOA_BOUND

_nlopt.LN_NELDERMEAD_swigconstant(_nlopt)
LN_NELDERMEAD = _nlopt.LN_NELDERMEAD

_nlopt.LN_SBPLX_swigconstant(_nlopt)
LN_SBPLX = _nlopt.LN_SBPLX

_nlopt.LN_AUGLAG_swigconstant(_nlopt)
LN_AUGLAG = _nlopt.LN_AUGLAG

_nlopt.LD_AUGLAG_swigconstant(_nlopt)
LD_AUGLAG = _nlopt.LD_AUGLAG

_nlopt.LN_AUGLAG_EQ_swigconstant(_nlopt)
LN_AUGLAG_EQ = _nlopt.LN_AUGLAG_EQ

_nlopt.LD_AUGLAG_EQ_swigconstant(_nlopt)
LD_AUGLAG_EQ = _nlopt.LD_AUGLAG_EQ

_nlopt.LN_BOBYQA_swigconstant(_nlopt)
LN_BOBYQA = _nlopt.LN_BOBYQA

_nlopt.GN_ISRES_swigconstant(_nlopt)
GN_ISRES = _nlopt.GN_ISRES

_nlopt.AUGLAG_swigconstant(_nlopt)
AUGLAG = _nlopt.AUGLAG

_nlopt.AUGLAG_EQ_swigconstant(_nlopt)
AUGLAG_EQ = _nlopt.AUGLAG_EQ

_nlopt.G_MLSL_swigconstant(_nlopt)
G_MLSL = _nlopt.G_MLSL

_nlopt.G_MLSL_LDS_swigconstant(_nlopt)
G_MLSL_LDS = _nlopt.G_MLSL_LDS

_nlopt.LD_SLSQP_swigconstant(_nlopt)
LD_SLSQP = _nlopt.LD_SLSQP

_nlopt.LD_CCSAQ_swigconstant(_nlopt)
LD_CCSAQ = _nlopt.LD_CCSAQ

_nlopt.GN_ESCH_swigconstant(_nlopt)
GN_ESCH = _nlopt.GN_ESCH

_nlopt.GN_AGS_swigconstant(_nlopt)
GN_AGS = _nlopt.GN_AGS

_nlopt.NUM_ALGORITHMS_swigconstant(_nlopt)
NUM_ALGORITHMS = _nlopt.NUM_ALGORITHMS

_nlopt.FAILURE_swigconstant(_nlopt)
FAILURE = _nlopt.FAILURE

_nlopt.INVALID_ARGS_swigconstant(_nlopt)
INVALID_ARGS = _nlopt.INVALID_ARGS

_nlopt.OUT_OF_MEMORY_swigconstant(_nlopt)
OUT_OF_MEMORY = _nlopt.OUT_OF_MEMORY

_nlopt.ROUNDOFF_LIMITED_swigconstant(_nlopt)
ROUNDOFF_LIMITED = _nlopt.ROUNDOFF_LIMITED

_nlopt.FORCED_STOP_swigconstant(_nlopt)
FORCED_STOP = _nlopt.FORCED_STOP

_nlopt.SUCCESS_swigconstant(_nlopt)
SUCCESS = _nlopt.SUCCESS

_nlopt.STOPVAL_REACHED_swigconstant(_nlopt)
STOPVAL_REACHED = _nlopt.STOPVAL_REACHED

_nlopt.FTOL_REACHED_swigconstant(_nlopt)
FTOL_REACHED = _nlopt.FTOL_REACHED

_nlopt.XTOL_REACHED_swigconstant(_nlopt)
XTOL_REACHED = _nlopt.XTOL_REACHED

_nlopt.MAXEVAL_REACHED_swigconstant(_nlopt)
MAXEVAL_REACHED = _nlopt.MAXEVAL_REACHED

_nlopt.MAXTIME_REACHED_swigconstant(_nlopt)
MAXTIME_REACHED = _nlopt.MAXTIME_REACHED
class roundoff_limited(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, roundoff_limited, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, roundoff_limited, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nlopt.new_roundoff_limited()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _nlopt.delete_roundoff_limited
    __del__ = lambda self: None
roundoff_limited_swigregister = _nlopt.roundoff_limited_swigregister
roundoff_limited_swigregister(roundoff_limited)

class forced_stop(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, forced_stop, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, forced_stop, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _nlopt.new_forced_stop()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _nlopt.delete_forced_stop
    __del__ = lambda self: None
forced_stop_swigregister = _nlopt.forced_stop_swigregister
forced_stop_swigregister(forced_stop)

class opt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opt, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _nlopt.delete_opt
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _nlopt.new_opt(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def optimize(self, *args):
        return _nlopt.opt_optimize(self, *args)

    def last_optimize_result(self):
        return _nlopt.opt_last_optimize_result(self)

    def last_optimum_value(self):
        return _nlopt.opt_last_optimum_value(self)

    def get_algorithm(self):
        return _nlopt.opt_get_algorithm(self)

    def get_algorithm_name(self):
        return _nlopt.opt_get_algorithm_name(self)

    def get_dimension(self):
        return _nlopt.opt_get_dimension(self)

    def set_min_objective(self, *args):
        return _nlopt.opt_set_min_objective(self, *args)

    def set_max_objective(self, *args):
        return _nlopt.opt_set_max_objective(self, *args)

    def remove_inequality_constraints(self):
        return _nlopt.opt_remove_inequality_constraints(self)

    def remove_equality_constraints(self):
        return _nlopt.opt_remove_equality_constraints(self)

    def add_inequality_constraint(self, *args):
        return _nlopt.opt_add_inequality_constraint(self, *args)

    def add_equality_constraint(self, *args):
        return _nlopt.opt_add_equality_constraint(self, *args)

    def add_inequality_mconstraint(self, *args):
        return _nlopt.opt_add_inequality_mconstraint(self, *args)

    def add_equality_mconstraint(self, *args):
        return _nlopt.opt_add_equality_mconstraint(self, *args)

    def get_lower_bounds(self, *args):
        return _nlopt.opt_get_lower_bounds(self, *args)

    def set_lower_bounds(self, *args):
        return _nlopt.opt_set_lower_bounds(self, *args)

    def get_upper_bounds(self, *args):
        return _nlopt.opt_get_upper_bounds(self, *args)

    def set_upper_bounds(self, *args):
        return _nlopt.opt_set_upper_bounds(self, *args)

    def get_stopval(self):
        return _nlopt.opt_get_stopval(self)

    def set_stopval(self, stopval):
        return _nlopt.opt_set_stopval(self, stopval)

    def get_ftol_rel(self):
        return _nlopt.opt_get_ftol_rel(self)

    def set_ftol_rel(self, ftol_rel):
        return _nlopt.opt_set_ftol_rel(self, ftol_rel)

    def get_ftol_abs(self):
        return _nlopt.opt_get_ftol_abs(self)

    def set_ftol_abs(self, ftol_abs):
        return _nlopt.opt_set_ftol_abs(self, ftol_abs)

    def get_xtol_rel(self):
        return _nlopt.opt_get_xtol_rel(self)

    def set_xtol_rel(self, xtol_rel):
        return _nlopt.opt_set_xtol_rel(self, xtol_rel)

    def get_xtol_abs(self, *args):
        return _nlopt.opt_get_xtol_abs(self, *args)

    def set_xtol_abs(self, *args):
        return _nlopt.opt_set_xtol_abs(self, *args)

    def get_maxeval(self):
        return _nlopt.opt_get_maxeval(self)

    def set_maxeval(self, maxeval):
        return _nlopt.opt_set_maxeval(self, maxeval)

    def get_numevals(self):
        return _nlopt.opt_get_numevals(self)

    def get_maxtime(self):
        return _nlopt.opt_get_maxtime(self)

    def set_maxtime(self, maxtime):
        return _nlopt.opt_set_maxtime(self, maxtime)

    def get_force_stop(self):
        return _nlopt.opt_get_force_stop(self)

    def set_force_stop(self, force_stop):
        return _nlopt.opt_set_force_stop(self, force_stop)

    def force_stop(self):
        return _nlopt.opt_force_stop(self)

    def get_errmsg(self):
        return _nlopt.opt_get_errmsg(self)

    def set_local_optimizer(self, lo):
        return _nlopt.opt_set_local_optimizer(self, lo)

    def get_population(self):
        return _nlopt.opt_get_population(self)

    def set_population(self, population):
        return _nlopt.opt_set_population(self, population)

    def get_vector_storage(self):
        return _nlopt.opt_get_vector_storage(self)

    def set_vector_storage(self, vector_storage):
        return _nlopt.opt_set_vector_storage(self, vector_storage)

    def set_initial_step(self, *args):
        return _nlopt.opt_set_initial_step(self, *args)

    def set_default_initial_step(self, x):
        return _nlopt.opt_set_default_initial_step(self, x)

    def get_initial_step(self, *args):
        return _nlopt.opt_get_initial_step(self, *args)

    def get_initial_step_(self, x):
        return _nlopt.opt_get_initial_step_(self, x)
opt_swigregister = _nlopt.opt_swigregister
opt_swigregister(opt)


def srand(seed):
    return _nlopt.srand(seed)
srand = _nlopt.srand

def srand_time():
    return _nlopt.srand_time()
srand_time = _nlopt.srand_time

def version(major, minor, bugfix):
    return _nlopt.version(major, minor, bugfix)
version = _nlopt.version

def version_major():
    return _nlopt.version_major()
version_major = _nlopt.version_major

def version_minor():
    return _nlopt.version_minor()
version_minor = _nlopt.version_minor

def version_bugfix():
    return _nlopt.version_bugfix()
version_bugfix = _nlopt.version_bugfix

def algorithm_name(a):
    return _nlopt.algorithm_name(a)
algorithm_name = _nlopt.algorithm_name
# This file is compatible with both classic and new-style classes.


